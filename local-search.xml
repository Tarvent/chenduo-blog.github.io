<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>paiza --B096:爆弾の大爆発</title>
    <link href="/chenduo-blog.github.io/2022/05/30/paizab096%E7%88%86%E5%BC%BE%E3%81%AE%E5%A4%A7%E7%88%86%E7%99%BA/"/>
    <url>/chenduo-blog.github.io/2022/05/30/paizab096%E7%88%86%E5%BC%BE%E3%81%AE%E5%A4%A7%E7%88%86%E7%99%BA/</url>
    
    <content type="html"><![CDATA[<p>很有意思的题目<br>难度：easy~medium</p><hr><h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h1><p>あなたは今、とある戦略ゲームをプレイしています。<br>ゲームの中で、敵を攻撃するために、フィールドに爆弾を仕掛けました。<br>敵がフィールド内に入ったところで一気に爆弾を点火し、敵に攻撃をする寸法です。</p><p>フィールドは縦 H 行、横 W 行のマス目としてあらわされ、これらのマス目のうちのいくつかに爆弾が仕掛けてあります。<br>i 行目、j 列目の爆弾が爆発すると、i 行目全体と j 列目全体に爆風が広がります。<br>あなたはすでにフィールド上に爆弾を仕掛け終わりました。<br>フィールド上の爆弾を一気に点火した場合、いくつのマスに爆風が広がるかを計算してください。</p><p>例えば、入力例 1 では以下のマスに爆風が広がるため、求めるべきマス目数は 12 になります。</p><figure class="highlight asciidoc"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs asciidoc">入力例1<br>4 4<br>#.#.<br><span class="hljs-code">....</span><br><span class="hljs-code">..#.</span><br><span class="hljs-code">....</span><br></code></pre></div></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">出力例1<br>12<br></code></pre></div></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs asciidoc">入力例2<br>5 8<br>.#.#....<br><span class="hljs-code">........</span><br><span class="hljs-code">........</span><br><span class="hljs-code">........</span><br>.....#..<br></code></pre></div></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">25<br></code></pre></div></td></tr></table></figure><hr><h1 id="Notice"><a href="#Notice" class="headerlink" title="Notice"></a>Notice</h1><p>1.需要注意读取有十位数百位数以上。<br>2.js中字符串不能改变，改成数组</p><h1 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h1><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">process.stdin.resume();<br>process.stdin.setEncoding(<span class="hljs-string">&#x27;utf8&#x27;</span>);<br><span class="hljs-comment">// 自分の得意な言語で</span><br><span class="hljs-comment">// Let&#x27;s チャレンジ！！</span><br><span class="hljs-keyword">var</span> lines = [];<br><span class="hljs-keyword">var</span> reader = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;readline&#x27;</span>).createInterface(&#123;<br><span class="hljs-attr">input</span>: process.stdin,<br><span class="hljs-attr">output</span>: process.stdout<br>&#125;);<br>reader.on(<span class="hljs-string">&#x27;line&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">line</span>) =&gt;</span> &#123;<br>lines.push(line);<br>&#125;);<br>reader.on(<span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-keyword">var</span> N=lines[<span class="hljs-number">0</span>];<br><br><span class="hljs-keyword">var</span> n = N.substring(<span class="hljs-number">0</span>, N.indexOf(<span class="hljs-string">&quot; &quot;</span>));<br><br><span class="hljs-keyword">var</span> m = N.substring(N.indexOf(<span class="hljs-string">&quot; &quot;</span>)+<span class="hljs-number">1</span>,N.length);<br><span class="hljs-comment">//注意一位数以上的索引和截取</span><br><span class="hljs-keyword">const</span> coor = [];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> j=<span class="hljs-number">0</span>; j&lt;=m;j++)&#123;<br>        <span class="hljs-keyword">if</span>(lines[i][j]==<span class="hljs-string">&#x27;#&#x27;</span>)&#123;<br>            coor.push([i,j]);<br>        &#125;<br>    &#125;<br>&#125;<span class="hljs-comment">//获取坐标炸弹</span><br><br><br><br><span class="hljs-keyword">const</span> result=[];<br><br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;=n;i++)&#123;<br>    result.push(lines[i].split(<span class="hljs-string">&#x27;&#x27;</span>));<br>&#125;<span class="hljs-comment">//change to 数组</span><br><br><br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;coor.length;i++)&#123;<br>    <span class="hljs-keyword">var</span> x=coor[i][<span class="hljs-number">0</span>];<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> j=<span class="hljs-number">0</span>;j&lt;m;j++)&#123;<br>        result[x][j]=<span class="hljs-string">&#x27;#&#x27;</span>;<br>    &#125;<br>&#125;<span class="hljs-comment">//横坐标</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;coor.length;i++)&#123;<br>    <span class="hljs-keyword">var</span> y= coor[i][<span class="hljs-number">1</span>];<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)&#123;<br>        <span class="hljs-keyword">if</span>(result[j][y]!=<span class="hljs-string">&#x27;#&#x27;</span>)&#123;<br>            result[j][y]=<span class="hljs-string">&#x27;#&#x27;</span>;<br>        &#125;<br><br>    &#125;<br>&#125;<span class="hljs-comment">//纵坐标</span><br><br><span class="hljs-keyword">var</span> z = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;=n;i++)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> j=<span class="hljs-number">0</span>;j&lt;=m;j++)&#123;<br>        <span class="hljs-keyword">if</span>(result[i][j]==<span class="hljs-string">&#x27;#&#x27;</span>)&#123;<br>            z++;<br>        &#125;<br>    &#125;<br>&#125;<span class="hljs-comment">//count z</span><br><br><span class="hljs-built_in">console</span>.log(z);<br>&#125;);<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>record</tag>
      
      <tag>study</tag>
      
      <tag>コードテスト</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript字符串数组</title>
    <link href="/chenduo-blog.github.io/2022/04/30/js%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E7%BB%84/"/>
    <url>/chenduo-blog.github.io/2022/04/30/js%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h1 id="js字符串替换"><a href="#js字符串替换" class="headerlink" title="js字符串替换"></a>js字符串替换</h1><p>在JavaScript中，字符串是不可变的</p><p>需要自己定义<code>replaceAt()</code></p><p>1.</p><figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">String</span>.prototype.replaceAt=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">index, replacement</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.substr(<span class="hljs-number">0</span>, index) + replacement+ <span class="hljs-built_in">this</span>.substr(index + replacement.length);<br>&#125;<br><br></code></pre></div></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> hello=<span class="hljs-string">&quot;Hello World&quot;</span>;<br>alert(hello.replaceAt(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;!!&quot;</span>)); <span class="hljs-comment">//should display He!!o World</span><br></code></pre></div></td></tr></table></figure><p>2.</p><figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> replaceStr1 = <span class="hljs-function">(<span class="hljs-params">str, index, char</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> strAry = str.split(<span class="hljs-string">&#x27;&#x27;</span>);<br>    strAry[index] = char;<br>    <span class="hljs-keyword">return</span> strAry.join(<span class="hljs-string">&#x27;&#x27;</span>);<br>  &#125;<br>  replaceStr(str1, <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;-&#x27;</span>); <span class="hljs-comment">// =&gt; Good-Morning</span><br>  replaceStr(str2, <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;-&#x27;</span>); <span class="hljs-comment">// =&gt; Hell- World</span><br></code></pre></div></td></tr></table></figure><h1 id="js字符转数组"><a href="#js字符转数组" class="headerlink" title="js字符转数组"></a>js字符转数组</h1><figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 第一种 split拆分 &quot;abc&quot;.split(&#x27;&#x27;) ==&gt; [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;] </span><br><span class="hljs-comment">// 第二种 [...] [...&quot;abc&quot;] ==&gt; [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;] Array.from(&quot;abc&quot;) ==&gt; [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</span><br><br>lines[i].split(<span class="hljs-string">&#x27;&#x27;</span>)；<br></code></pre></div></td></tr></table></figure><h1 id="js-截取前后字符"><a href="#js-截取前后字符" class="headerlink" title="js 截取前后字符"></a>js 截取前后字符</h1><p>前</p><figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//前</span><br><span class="hljs-function"><span class="hljs-title">publicstaticvoidsubstringTest01</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">String</span> str = <span class="hljs-string">&quot;http_https://www.baidu.com/&quot;</span>;<br>    <span class="hljs-comment">//截取_之前字符串</span><br>    <span class="hljs-built_in">String</span> str1 = str.substring(<span class="hljs-number">0</span>, str.indexOf(<span class="hljs-string">&quot;_&quot;</span>));<br>    System.out.println(<span class="hljs-string">&quot;截取_之前字符串:&quot;</span>+str1);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>后</p>]]></content>
    
    
    <categories>
      
      <category>javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>study</tag>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>paiza --C084</title>
    <link href="/chenduo-blog.github.io/2022/03/14/paizaC084/"/>
    <url>/chenduo-blog.github.io/2022/03/14/paizaC084/</url>
    
    <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h1><p>あなたは友人に向けてメールを送ろうとしています。<br>ただメールを送るだけではつまらないので、文字列を装飾して送ることにしました。<br>送りたい文字列の周囲を “+” で枠のように囲んで装飾します。</p><p>このような処理を手作業で行いたくないため、プログラムで装飾しようとしています。<br>この “+” の枠で囲む装飾をするプログラムを書いてください。</p><p>入力例 1 では “Paiza” という文字列を送ります。<br>この文字を枠で囲み装飾すると、以下のようになります。</p><figure class="highlight asciidoc"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs asciidoc">+++++++<br>+Paiza+<br>+++++++<br></code></pre></div></td></tr></table></figure><hr><h1 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h1><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">process.stdin.resume();<br>process.stdin.setEncoding(<span class="hljs-string">&#x27;utf8&#x27;</span>);<br><span class="hljs-comment">// 自分の得意な言語で</span><br><span class="hljs-comment">// Let&#x27;s チャレンジ！！</span><br><span class="hljs-keyword">var</span> lines = [];<br><span class="hljs-keyword">var</span> reader = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;readline&#x27;</span>).createInterface(&#123;<br><span class="hljs-attr">input</span>: process.stdin,<br><span class="hljs-attr">output</span>: process.stdout<br>&#125;);<br>reader.on(<span class="hljs-string">&#x27;line&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">line</span>) =&gt;</span> &#123;<br>lines.push(line);<br>&#125;);<br>reader.on(<span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-keyword">var</span> N = lines[<span class="hljs-number">0</span>].length + <span class="hljs-number">2</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)&#123;<br>process.stdout.write(<span class="hljs-string">&#x27;+&#x27;</span>);<br>&#125;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;\n+&#x27;</span>+lines[<span class="hljs-number">0</span>]+<span class="hljs-string">&#x27;+&#x27;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; N ; j ++)&#123;<br>process.stdout.write(<span class="hljs-string">&#x27;+&#x27;</span>);<br>&#125;&#125;);<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>record</tag>
      
      <tag>study</tag>
      
      <tag>コードテスト</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《遥远的救世主》读后</title>
    <link href="/chenduo-blog.github.io/2021/08/31/%E9%81%A5%E8%BF%9C%E7%9A%84%E6%95%91%E4%B8%96%E4%B8%BB/"/>
    <url>/chenduo-blog.github.io/2021/08/31/%E9%81%A5%E8%BF%9C%E7%9A%84%E6%95%91%E4%B8%96%E4%B8%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="1-三部曲"><a href="#1-三部曲" class="headerlink" title="1. 三部曲"></a>1. 三部曲</h1><ul><li>《背叛》</li><li>《遥远的就救世主》</li><li>《天幕红尘》</li></ul><h1 id="2-五台山论道"><a href="#2-五台山论道" class="headerlink" title="2. 五台山论道"></a>2. 五台山论道</h1><p>悟  </p><p>悟道休言天命， </p><p> 修行勿取真经。 </p><p> 一悲一喜一枯荣， </p><p> 哪个前生注定？  </p><p>袈裟本无清净，  </p><p>红尘不染性空。  </p><p>幽幽古刹千年钟，  </p><p>都是痴人说梦。</p><p>佛乃觉性，非人，人人都有觉性不等于觉性就是人。人相 可坏，觉性无生无灭，即觉即显，即障即尘蔽，无障不显，了障涅槃。觉行圆满之佛乃佛教人相之佛，圆满即止，即非无量。若佛有量，即非阿弥陀佛。佛法无量即 觉行无量，无圆无不圆，无满无不满，亦无是名究竟圆满。晚辈个人以为，佛教以次第而分，从精深处说是得道天成的道法，道法如来不可思议，即非文化。从浅义 处说是导人向善的教义，善恶本有人相、我相、众生相，即是文化。从众生处说是以贪制贪、以幻制幻的善巧，虽不灭败坏下流，却无碍抚慰灵魂的慈悲。</p><p>晚辈以为，传统观念的死结就在一个‘靠’字上，在家靠父母，出门靠朋友，靠上帝、靠菩萨、靠皇恩……总之靠什么都行，就是别靠自己。这是一个沉积了几千年的文 化属性问题，非几次新文化运动就能开悟。晚辈无意评说道法，只在已经缘起的事情里顺水推舟，借英雄好汉的嗓子喊上两声，至少不违天道朝纲。</p><h1 id="3-为什么自杀"><a href="#3-为什么自杀" class="headerlink" title="3. 为什么自杀"></a>3. 为什么自杀</h1><p>实事求是，不搞形式。这才叫当生则生，当死则死</p><h1 id="4-救主，自救"><a href="#4-救主，自救" class="headerlink" title="4. 救主，自救"></a>4. 救主，自救</h1><p>杀富富不去，救贫贫不离，扶贫是不治之治，不解决造血问题。救主不是人，是道，得救不是破了戒的狼吞虎咽，是觉悟。</p><h3 id="天道"><a href="#天道" class="headerlink" title="天道"></a>天道</h3><p>天是什么？ 天是神，是上帝，是创造万物者，是全能全知者，是遍在不可见者。天是道，是食物规律和自然法则。</p><p>了妄唯真即是神，人和神不一不异。</p>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
      <category>读后感</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web application security(书)</title>
    <link href="/chenduo-blog.github.io/2021/08/30/web%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0/"/>
    <url>/chenduo-blog.github.io/2021/08/30/web%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>web学习笔记</category>
      
      <category>web安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>record</tag>
      
      <tag>study</tag>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>全局安装npm包报错没有权限</title>
    <link href="/chenduo-blog.github.io/2021/05/14/npm%E6%97%A0root%E9%97%AE%E9%A2%98/"/>
    <url>/chenduo-blog.github.io/2021/05/14/npm%E6%97%A0root%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="npm-安装时提示没有权限"><a href="#npm-安装时提示没有权限" class="headerlink" title="npm 安装时提示没有权限"></a>npm 安装时提示没有权限</h1><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">npm ERR! code EACCES<br>npm ERR! syscall rename<br>npm ERR! path <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/lib/</span>node_modules/npm<br>npm ERR! dest <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/lib/</span>node_modules/.npm-i9nnxROI<br>npm ERR! errno -<span class="hljs-number">13</span><br><br></code></pre></div></td></tr></table></figure><p>发现 node_module 的所有者是 root 下的</p><h1 id="换下目录所有者"><a href="#换下目录所有者" class="headerlink" title="换下目录所有者"></a>换下目录所有者</h1><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">sudo chown -R anna: <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/lib/</span>node_modules<br>chown 命令是将指定文件的拥有者改为指定的用户或组<br>参数 -R 处理指定目录以及其子目录下的所有文件<br>具体可以看下 chown 命令的介绍：www.cnblogs.com<span class="hljs-regexp">/peida/</span>archi…<br></code></pre></div></td></tr></table></figure><h1 id="ok"><a href="#ok" class="headerlink" title="ok"></a>ok</h1><p>这样 /usr/local/lib/node_modules 目录的所有者就更换完毕了，可以正常在全局安装 npm 包。</p>]]></content>
    
    
    <categories>
      
      <category>npm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记录</tag>
      
      <tag>frontend</tag>
      
      <tag>問題</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AboutGithub</title>
    <link href="/chenduo-blog.github.io/2018/08/25/AboutGithub/"/>
    <url>/chenduo-blog.github.io/2018/08/25/AboutGithub/</url>
    
    <content type="html"><![CDATA[<h1 id="github-基础"><a href="#github-基础" class="headerlink" title="github 基础"></a>github 基础</h1><h2 id="执行git"><a href="#执行git" class="headerlink" title="执行git"></a>执行git</h2><figure class="highlight js"><table><tr><td class="gutter hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">git init<br></code></pre></div></td></tr></table></figure><h2 id="github-仓库链接"><a href="#github-仓库链接" class="headerlink" title="github 仓库链接"></a>github 仓库链接</h2><figure class="highlight js"><table><tr><td class="gutter hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">git remote add origin [https ]<br></code></pre></div></td></tr></table></figure><h2 id="拉到本地防止冲突"><a href="#拉到本地防止冲突" class="headerlink" title="拉到本地防止冲突"></a>拉到本地防止冲突</h2><figure class="highlight js"><table><tr><td class="gutter hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">git pull origin master(main)<br></code></pre></div></td></tr></table></figure><h2 id="提交本地缓存"><a href="#提交本地缓存" class="headerlink" title="提交本地缓存"></a>提交本地缓存</h2><figure class="highlight js"><table><tr><td class="gutter hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">git add .<br></code></pre></div></td></tr></table></figure><h2 id="形成本地仓库的项目文件分支结构"><a href="#形成本地仓库的项目文件分支结构" class="headerlink" title="形成本地仓库的项目文件分支结构"></a>形成本地仓库的项目文件分支结构</h2><figure class="highlight js"><table><tr><td class="gutter hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">git commit -m <span class="hljs-string">&#x27;first commit&#x27;</span><br></code></pre></div></td></tr></table></figure><h2 id="本地仓库内容提交到github仓库"><a href="#本地仓库内容提交到github仓库" class="headerlink" title="本地仓库内容提交到github仓库"></a>本地仓库内容提交到github仓库</h2><figure class="highlight js"><table><tr><td class="gutter hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">git push -u origin master<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>record</tag>
      
      <tag>study</tag>
      
      <tag>コードテスト</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Blog（hexo+git）</title>
    <link href="/chenduo-blog.github.io/2018/03/30/frist-md/"/>
    <url>/chenduo-blog.github.io/2018/03/30/frist-md/</url>
    
    <content type="html"><![CDATA[<p>一、安装</p><p>首先，需要安装node.js、npm和Git</p><p>Git可直接下载安装包进行安装。点击下载。安装后，需要下载xcode才可以。否则在使用中会遇到错误。这里我出现的问题是起初没有下载xcode，在后面初始化的时候，一直提示找不到Git，下载了xcode也不行，后来我打开了xcode，然后在关闭，就可以了。因为是小白，具体原因不明<br>接下来安装node.js。打开终端，输入命令<br>npm install -g hexo-cli<br>这里遇到的问题是，提示没有权限，于是在上面的命令增加了sudo，如下:</p><p>sudo npm install -g hexo-cli<br>然后安装node.js。我也是直接下载安装程序来进行安装的。点击下载<br>安装完后，可输入以下命令进行检查，输入每个命令后，都会弹出相应版本号。<br>node -v</p><p>npm -v</p><p>Git –version<br>然后在进行安装hexo，输入以下命令即可，遇到的问题与安装node.js类似。所以直接加了sudo</p><p>sudo npm install -g hexo<br>二、博客初始化</p><p>首先创建一个文件夹，该文件夹用于存储博客的文件。然后通过终端，进入到该文件夹，命令如下：</p><p>cd youblogfiles<br>然后初始化本地博客，输入以下命令。初始化时，切记文件夹要空的才可以，否则会初始化失败。若失败了建议删除文件夹在重新创建。</p><p>hexo init<br>完成后在进行安装npm</p><p>sudo npm install<br>执行下述命令生成本地网页文件并开启服务器，然后通过<a href="http://localhost:4000查看本地博客。">http://localhost:4000查看本地博客。</a></p><p>hexo g<br>hexo s<br>三、上传代码</p><p>注册并登陆GitHub账号后，新建仓库，名称必须为 user.github.io，如 hxf236386915.github.io。 打开文件_config.yml，翻到最底下，将下面代码复制进去。</p><p>deploy:<br>  type: git<br>  repository: <a href="https://github.com/hxf236386915/hxf236386915.github.io.git">https://github.com/hxf236386915/hxf236386915.github.io.git</a><br>  branch: master<br>其中将repository中hxf236386915改为自己的用户名，注意type、repository、branch后均有空格。通过如下命令在youblogfiles下生成静态文件并上传到服务器。</p><p>hexo g<br>hexo d<br>若执行hexo g出错则执行npm install hexo –save，若执行hexo d出错则执行npm install hexo-deployer-git –save。错误修正后再次执行hexo g和hexo d上传到服务器。</p><p>若未关联GitHub，执行hexo d时会提示输入GitHub账号用户名和密码，即:</p><p>username for ‘<a href="https://github.com&/#39;">https://github.com&#39;</a>:<br>password for ‘<a href="https://github.com&/#39;">https://github.com&#39;</a>:<br>hexo d执行成功后便可通过<a href="https://hxf236386915.github.io访问博客,看到的内容和http//localhost:4000%E7%9B%B8%E5%90%8C%E3%80%82">https://hxf236386915.github.io访问博客，看到的内容和http://localhost:4000相同。</a></p><p>四、添加ssh keys 到github</p><p>添加ssh key后不需要每次更新博客再输入用户名和密码。首先检查本地是否包含ssh keys。如果存在则直接将ssh key添加到GitHub之中，否则新生成ssh key。</p><p>输入一下代码，之后按照要求输入账号和两次密码</p><p>ssh-keygen -t rsa -C “your_email@exampl”<br>完成之后，打开博客文件夹，将your_email.pub中的内容复制到github中的设置-deploy keys中即可。</p><p>然后执行如下代码</p><p>hexo g<br>hexo d<br>五、绑定域名</p><p>首先，在博客文件夹中创建CNAME文件，不可以有后缀。然后将域名粘贴进文件中。并上传至github。</p><p>然后，在通过阿里云进行解析。详情如下</p><p>记录类型：CNAME<br>主机记录：@<br>解析线路：默认<br>记录值：<a href="http://hxf236386915.github.io/">http://hxf236386915.github.io</a><br>六、安装配置主题</p><p>这里使用的的是hexo中的theme主题。命令如下</p><p>cd youblogflie（你的博客文件夹）<br>git clone <a href="https://github.com/iissnan/hexo-theme-next">https://github.com/iissnan/hexo-theme-next</a> themes/next<br>将blog目录下_config.yml里的theme的名称landscape更改为next。</p><p>执行如下命令（每次部署文章的步骤）</p><p>hexo g  //生成缓存和静态文件<br>hexo d  //重新部署到服务器<br>当本地博客部署到服务器后，网页端无变化时可以采用下述命令。</p><p>hexo clean  //清楚缓存文件(db.json)和已生成的静态文件(public)<br>配置主题可在主题官网中查看相应教程，需要注意的是站点配置文件和主题配置文件。点击进入next官网</p><p>站点配置文件就是博客文件夹目录下的_config.yml。 主题配置文件为，博客文件夹-theme-next下的_config.yml</p><p>七、写作</p><p>首先创建一个md文件，命令如下：</p><p>hexo new 文件名<br>然后在博客文件夹目录下的source-_posts打开。</p><p>title：代表标题</p><p>date：日期</p><p>tags：[标签1，标签2]</p><p>categories：分类</p><p>—</p><p>正文</p><p>超链接：</p><p><a href="https://houxuefeng.com/">F</a><br>图片：</p><p><img src="http://pvacs1eu6.bkt.clouddn.com/WechatIMG57.jpeg" alt="1"><br>或者</p><img src="http://pvacs1eu6.bkt.clouddn.com/WechatIMG57.jpeg" width = 100% div align=center/>下面这个可以调整大小。<p>音乐：</p><audio id="audio" autoplay="autoplay">    <source src="http://qzone.haoduoge.com/music1/2015-04-23/1429774382.mp3" type="audio/mp3"></source></audio>八、关于图床的问题<p>本人选择的是七牛云，注册登录后，创建存储。然后就可以上传图片了。在上传完图片后选择复制外链即可。</p><p>同时推荐一款工具叫ipic。可自行搜索下载。</p><p>九、其他</p><p>另外在修改配置的时候，可以使用hexo s 边修改边预览。</p><p>修改创建文章时的默认值，可修改博客文件目录下 scaffolds-post.md 即可。</p><p>以上。</p><hr><p>hexo官网：<a href="https://hexo.io/zh-cn/docs/setup">https://hexo.io/zh-cn/docs/setup</a></p><p>必要组件：Node.js homebrew nvm(管理Node.js)<br>                  nvm参考：<a href="https://www.jianshu.com/p/a3f8778bc0a1">https://www.jianshu.com/p/a3f8778bc0a1</a></p><p>hexo主题 ：<br>1.<a href="https://hexo.fluid-dev.com/docs/">https://hexo.fluid-dev.com/docs/</a>  （fluid 好看）<br>2.<a href="http://theme-next.iissnan.com/getting-started.html">http://theme-next.iissnan.com/getting-started.html</a> （next 使用多）<br>3.<a href="https://www.haomwei.com/technology/maupassant-hexo.html#%E4%B8%BB%E9%A2%98%E7%89%B9%E6%80%A7%EF%BC%88%E8%87%B3%E7%AE%80%EF%BC%89">https://www.haomwei.com/technology/maupassant-hexo.html#主题特性（至简）</a></p><p>图片来源：<a href="https://wallhaven.cc/toplist?page=2">https://wallhaven.cc/toplist?page=2</a></p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记录</tag>
      
      <tag>博客</tag>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
