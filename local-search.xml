<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>JavaScript get hour, minute and millisecond</title>
    <link href="/chenduo-blog.github.io/2022/12/01/js(javascript)%E5%8F%96%E5%BE%97%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4%E5%B0%8F%E6%97%B6%EF%BC%8C%E5%88%86%E9%92%9F%EF%BC%8C%E7%A7%92%20%E4%BB%A5%E5%8F%8A%E6%AF%AB%E7%A7%92/"/>
    <url>/chenduo-blog.github.io/2022/12/01/js(javascript)%E5%8F%96%E5%BE%97%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4%E5%B0%8F%E6%97%B6%EF%BC%8C%E5%88%86%E9%92%9F%EF%BC%8C%E7%A7%92%20%E4%BB%A5%E5%8F%8A%E6%AF%AB%E7%A7%92/</url>
    
    <content type="html"><![CDATA[<p>首先 我们需要new一个date对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> d = <span class="hljs-keyword">new</span> date();<br></code></pre></td></tr></table></figure><p>随后，取得当前时间小时：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">d.getHours();<br></code></pre></td></tr></table></figure><p>取得当前分钟:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">d.getMinutes();<br></code></pre></td></tr></table></figure><p>取得当前秒</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">d.getSeconds();<br></code></pre></td></tr></table></figure><p>取得当前毫秒</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">d.getMilliseconds();<br></code></pre></td></tr></table></figure><p>全部代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script type=<span class="hljs-string">&quot;text/javascript&gt;</span><br><span class="hljs-string"></span><br><span class="hljs-string">var d = new Date();</span><br><span class="hljs-string">document.write(&#x27;&lt;br /&gt; 当前时间的小时：&#x27;+d.getHours());</span><br><span class="hljs-string">document.write(&#x27;&lt;br /&gt; 当前时间的分钟:&#x27;+d.getMinutes());</span><br><span class="hljs-string">document.write(&#x27;&lt;br /&gt; 当前时间的秒:&#x27;+d.getSeconds());</span><br><span class="hljs-string">document.write(&#x27;&lt;br /&gt; 当前时间的毫秒:&#x27;+d.getMilliseconds());</span><br><span class="hljs-string">&lt;/script&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>study</tag>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>論文における提案手法の書き方</title>
    <link href="/chenduo-blog.github.io/2022/10/03/%E8%AB%96%E6%96%87%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E6%8F%90%E6%A1%88%E6%89%8B%E6%B3%95%E3%81%AE%E6%9B%B8%E3%81%8D%E6%96%B9/"/>
    <url>/chenduo-blog.github.io/2022/10/03/%E8%AB%96%E6%96%87%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E6%8F%90%E6%A1%88%E6%89%8B%E6%B3%95%E3%81%AE%E6%9B%B8%E3%81%8D%E6%96%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="「提案手法」には普遍的な一般的内容，「実装」には具現化のための具体的内容を書く"><a href="#「提案手法」には普遍的な一般的内容，「実装」には具現化のための具体的内容を書く" class="headerlink" title="「提案手法」には普遍的な一般的内容，「実装」には具現化のための具体的内容を書く"></a>「提案手法」には普遍的な一般的内容，「実装」には具現化のための具体的内容を書く</h1><p>「提案手法」には，理論的な側面や，どうしてその考えが出てくるのか，というできる限り普遍的なことを書きます．なので，基本的には変数だけを使って説明していくイメージになります．そして「実装」では，これを具体的にどの様に実装するか，ということを書きます．つまり提案手法で述べられた変数に，具体的な数値を入れそれを具現化する方法を説明していきます．これだけ聞いてもよく分かりづらいと思うので，私の専門である自己位置推定を例として，簡単に説明します．提案の新規性とかは関係ありませんので，書き方を参考にしてください．</p><h1 id="良い例"><a href="#良い例" class="headerlink" title="良い例"></a>良い例</h1><h2 id="提案手法"><a href="#提案手法" class="headerlink" title="提案手法"></a>提案手法</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs less">確率的に移動ロボットの現時刻<span class="hljs-selector-tag">t</span>の自己位置<span class="hljs-selector-tag">xt</span>を推定する方法を提案する．自己位置<span class="hljs-selector-tag">xt</span>を求めるに辺り，時刻<span class="hljs-selector-tag">1</span>から<span class="hljs-selector-tag">t</span>までの制御入力とセンサ観測の時系列データ<span class="hljs-selector-tag">u1</span>:<span class="hljs-selector-tag">t</span>と<span class="hljs-selector-tag">z1</span>:<span class="hljs-selector-tag">t</span>，および地図<span class="hljs-selector-tag">m</span>が利用できるものとする．つまり，以下のような条件付き確率を求める問題として定式化する．<span class="hljs-selector-tag">p</span>(xt|<span class="hljs-attribute">u1</span>:t,<span class="hljs-attribute">z1</span>:t,m)これは，ベイズの定理や全確率の定理を用いて，以下のように展開することができる．<br>η<span class="hljs-selector-tag">p</span>(zt|xt,m)∫<span class="hljs-selector-tag">p</span>(xt|xt−<span class="hljs-number">1</span>,ut)<span class="hljs-selector-tag">p</span>(xt−<span class="hljs-number">1</span>|<span class="hljs-attribute">u1</span>:t−<span class="hljs-number">1</span>,<span class="hljs-attribute">z1</span>:t−<span class="hljs-number">1</span>,m)<span class="hljs-selector-tag">dxt</span>−<span class="hljs-selector-tag">1</span>ここでηは正規化径数である．<span class="hljs-selector-tag">p</span>(zt|xt,m)は，位置<span class="hljs-selector-tag">xt</span>と地図<span class="hljs-selector-tag">m</span><br>が与えられた下で，センサ観測値<span class="hljs-selector-tag">zt</span>が得られる確率を考えるモデルである．そのため「観測モデル」と呼ぶ．また<span class="hljs-selector-tag">p</span>(xt|xt−<span class="hljs-number">1</span>,ut)<br>は，<span class="hljs-selector-tag">1</span>時刻前の自己位置<span class="hljs-selector-tag">xt</span>−<span class="hljs-selector-tag">1</span>に対して，制御入力<span class="hljs-selector-tag">ut</span>を与えた際に，現時刻の位置<span class="hljs-selector-tag">xt</span>に対する確率を考えるモデルとなっている．そのた「動作モデル」と呼ぶ．提案する確率的自己位置推定法では，観測モデルと動作モデルが中心的な役割を果たす．以下では，その具体的な実装方法について説明する．<br></code></pre></td></tr></table></figure><h2 id="実装"><a href="#実装" class="headerlink" title="実装"></a>実装</h2><p>観測モデルは…（ここからはじめてどの様に観測モデルを具体的に設計するか，またそこに含まれるパラメータをどの様に決定するか解説します）．<br>動作モデルは，（こちらも同様に解説します）．<br>なぜこれが良いのか</p><p>まず最初に「移動ロボットのための確率的自己位置推定法を提案する」と言っています．これに対して、使用できる情報（制御入力，センサ観測，地図）を仮定しています．これはとても一般的な話です．そして，それが条件付き確率で表記されるとしています．これも一般的です．そしてこの条件付き確率に「ベイズの定理」および「全確率の定理」を適用することで，式変形を行うことができると説明しています．これは数式展開の一般論です．<br>そして数式を展開した後に，「観測モデル」と「動作モデル」と説明しています．実は観測モデルや動作モデルには複数の実装方法があるのです．つまり，式展開までは一意に定まる一般論に基づいて議論が行われましたが，それ以降は，様々な実現方法のある議論に変わっていくのです．<br>この様に記述すると，後から読んだときに，提案の一般性を確保することができます．例えば，最初に実装した観測モデルのできが悪く，後に誰かが新しい観測モデルを提案し，性能を一気に向上させたとしても，「そもそも確率的自己位置推定法を提案したのは私だ」というように，大きな一般的な部分のオリジナルを主張できるのです．<br>この様な考えは特許にも似ているところがあるといえます．つまり，可能な限り一般的な話に執着し，「提案手法」の内容を書き進めなければなりません．そしてその具体的な実現方法として，「実装」の内容が説明されなければなりません．</p><h1 id="悪い例"><a href="#悪い例" class="headerlink" title="悪い例"></a>悪い例</h1><p>提案手法と実装が一緒になったもの</p><p>（上の例を参考にしながら少し変化を加えて）確率的に移動ロボットの現時刻t<br>の自己位置xt<br>を推定する方法を提案する．（略）これは，ベイズの定理や全確率の定理を用いて，以下のように展開することができる．<br>ηp(zt|xt,m)∫p(xt|xt−1,ut)p(xt−1|u1:t−1,z1:t−1,m)dxt−1<br>この式は，カルマンフィルタを用いることで推定できる．カルマンフィルタでは…（以下カルマンフィルタを用いた自己位置推定の話）<br>なぜ悪いのか</p><p>式展開された結果は，カルマンフィルタ以外の方法（例えばパーティクルフィルタ）でも求めることができます．にも関わらず，「カルマンフィルタで推定できる」と言ってしまっています．なので，「上式をカルマンフィルタで推定することが提案」ということになることを意味します．これでは一般性が落ちてしまいます．本来であれば，「この式は様々な方法により推定可能である．本論文では，これをカルマンフィルタにより推定する実装方法を述べる」としておくべきです．もしそうでなければ，「パーティクルフィルタで推定します」という新たな研究に対して，新規性を主張することが難しくなってしまいます．同じ数式を違う方法で解いているだけなのに，「私のほうが先にパーティクルフィルタを適用したから偉い」と言われれるのは悲しいです．<br>この様なことがあるので，一般性を保てる所までを提案とし，その具体的な実現方法を実装として記述することが重要になります．</p><p>#真のこの記事の執筆のモチベーション</p><h2 id="10年ぐらい論文を書いてやっとわかった"><a href="#10年ぐらい論文を書いてやっとわかった" class="headerlink" title="10年ぐらい論文を書いてやっとわかった"></a>10年ぐらい論文を書いてやっとわかった</h2><p>私が初めて論文を書いたのは2011年11月頃で，国内学会発表の論文を書きました．当時何も分からなかった私に指導教員は「提案には一般的，実装には具体的な内容を書け」と言いました．当時の私は，それを私なりの考え書きました．しかし何度書いても指導教員から「違う」と言われました．ちなみに私は「ロボットは動いてなんぼ」というスタンスで研究してました．つまり，理論云々より，ロボットを動かす方法ばかり考えていたのです（これが困難を生み出す要因だったのです）．<br>ロボットを動かす研究を進めそのまま博士を取った辺りで，なんとなく「もっと理論的な研究をしよう」と舵を切る事にしました．そうして理論を深めていくうちに，ついに理論的な部分を提案できる論文を書ける様になりました．つまり，数式展開やなぜそう考えるのかと言った理論的なものを提案する論文です．その時（2017年ぐらい）にはじめて，指導教員の言っていた言葉を少し理解できました．そして理論的な研究をさらに数年続け，指導教員の言っていた意味がやっと理解できて気でいます（今は2021年3月）．なのでこの記事を書きました．<br>しつこいですが，「提案は一般的」，「実装は実現例」です．しかしこの考え，世間にはあまり浸透していない様に見えます．私はセンサとして，よくレーザセンサを用います．なので自己位置推定の理論的な部分を提案しても，それを確認するためにレーザセンサを用いた実装を行います．そして発表をすると，「この方法はカメラでも使えますか」と良く聞かれます．私が提案しているのは，「外界センサを使って行う新しい自己位置推定理論」であり，「レーザセンサを用いた新しい自己位置推定法」ではありません．なので，当然カメラにも適用できます（センサの特性上実現可能かどうかはあるかもしれませんが）．つまり世間的には「アプリケーション的な観点で研究成果を見ている」人の方が多いといえます（そう指摘する私もその立ち位置の人間なのだと日々痛感しますが）．研究発表を見る側としても，「提案している普遍的なものが何か」というものを考える様になると，より深く研究発表を聞くことができると思います．<br>はびこるアプリケーション研究の「提案手法」</p><p>最近私が学会に行って思うことは「アプリケーション研究が多すぎる」というものです．つまり，「何かフレームワークを使って実装してみました」という研究が多すぎるのです．言い換えれば，「実装してみました」という発表です．もちろん，これ自体は問題ではありません．問題は，これらの研究の多くが「提案法」という言葉を用いていることです．この記事を読んで頂いた後ならわかると思いますが，「実装は提案の具現化手法」であり，実装自体が提案となることはないのです．「どうしてこの様に実装すると良くなるのか？」という問いに対して，普遍的な答えを出せた時，それがはじめて提案となるのです．しかし，なんとか論文の体裁を保ちたく，安易に「提案法」と呼称しているものが多い様に思います．<br>論文では，必ずしも提案法が重要なわけではありません．これまでに提案されてきた方法を適用し，どの様な結果が得られるか，という「調査」を行うことも重要な研究です．そして調査をした結果，良い結果が出ても出なくても，新しい知見があればそれで十分なのです．そこに新しい知見があれば，きっと誰かに話したくなるはずです．それを等身大に発表してくれると，聞いている方も面白いのです．<br>私も学生のときは，「ロボットは動いてなんぼ」という研究をしていました．つまり，どっぷりとアプリケーション研究をしていました．その中で「提案法は何か」という話をしていたので，指導教員の言葉が理解できなかったのだと思います．幸いなことにここ最近，理論寄りの研究をして，指導教員の言っていたことの正しさ，そしてその重要さが理解できたつもりでいます．そして何より，この考えにたどり着いたからこそ，より大きな視点で研究発表を見れるようになったのではないか，と自負したりもしています．<br>まとめ</p><p>論文における「提案」の書き方を自分の経験を基に書いてみました．提案は「提案手法」と「実装」の2つに別れること，そして「提案手法は一般的」，「実装は具体的」というものです．さらに付け加えて言うなら，無理に提案法という言葉を使わない方が良いということです．単に実装だけした研究であるならば，素直に，どういう方法が有効か調べた調査研究だとか，なぜその実装が良くなるか考えた検討研究と呼称すると，発表者自身も気持ちが楽になるのかな？と思います．私は，これを理解するのに10年ぐらいかかりましたので，この記事の内容が論文を書くにあたり困っている方の助けとなる幸いです．</p>]]></content>
    
    
    <categories>
      
      <category>論文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cross-site leaks 先行研究</title>
    <link href="/chenduo-blog.github.io/2022/09/27/Cross-site-leaks%E7%A0%94%E7%A9%B6/"/>
    <url>/chenduo-blog.github.io/2022/09/27/Cross-site-leaks%E7%A0%94%E7%A9%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="先行研究-Previous-Research"><a href="#先行研究-Previous-Research" class="headerlink" title="先行研究 Previous Research"></a>先行研究 Previous Research</h1><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">- HTTP cookies are small blocks <span class="hljs-keyword">of</span> data created <span class="hljs-keyword">by</span> a web <span class="hljs-keyword">server</span> <span class="hljs-keyword">while</span> a <span class="hljs-keyword">user</span> <span class="hljs-keyword">is</span> browsing a website <span class="hljs-keyword">and</span> placed <span class="hljs-keyword">on</span> the <span class="hljs-keyword">user</span>’s computer <span class="hljs-keyword">or</span> <span class="hljs-keyword">some</span> other device <span class="hljs-keyword">by</span> the <span class="hljs-keyword">user</span>’s web browser.<br></code></pre></td></tr></table></figure><h2 id="same-origin-policy"><a href="#same-origin-policy" class="headerlink" title="same origin policy"></a>same origin policy</h2><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs maxima">For exapmle<br>This website&#x27;s <span class="hljs-built_in">origin</span> <span class="hljs-built_in">is</span> http://www.<span class="hljs-built_in">example</span>.com/dir/page.html <br>where the protocol <span class="hljs-built_in">is</span> https. <br>The host <span class="hljs-built_in">is</span>  www.<span class="hljs-built_in">example</span>.com/dir/page.html, <br><span class="hljs-keyword">and</span> the port <span class="hljs-built_in">is</span> <span class="hljs-keyword">not</span> specified.(<span class="hljs-number">80</span>)<br><br><br>http://www.<span class="hljs-built_in">example</span>.com/dir2/other.html ：    (same <span class="hljs-built_in">origin</span>)<br>http://<span class="hljs-built_in">example</span>.com/dir/other.html：             （different host）<br>http://v2.www.<span class="hljs-built_in">example</span>.com/dir/other.html：（different host）<br>http://www.<span class="hljs-built_in">example</span>.com:<span class="hljs-number">81</span>/dir/other.html：（different port）<br></code></pre></td></tr></table></figure><h2 id="cross-site-leaks"><a href="#cross-site-leaks" class="headerlink" title="cross-site leaks"></a>cross-site leaks</h2><ol><li><p>Cross-Site Leaks (XS-Leaks) are vulnerabilities to side channel attacks on Web browsers. </p></li><li><p>The type of side channel attacks on a web browser bypass security mechanism such as the same source policy.</p></li><li><p>Cross-Site Leaks describe a client-side bug that allows an attacker to collect side-channel information from a cross-origin HTTP resource. </p></li></ol><img src="/chenduo-blog.github.io/2022/09/27/Cross-site-leaks%E7%A0%94%E7%A9%B6/Jietu20220927-145017.jpg" class><h2 id="Error-messages"><a href="#Error-messages" class="headerlink" title="Error messages"></a>Error messages</h2><p>The execution context of a web application is defined through the concept of web origins.<br>Web applications may call and embed other web applications to enhance functionality. </p><p>By using CORS (Cross-Origin Resource Sharing ), An attacker can send an enabled request to a target website which redirects based on the user state. </p><p>When the browser denies the request, the full URL of the redirect target is leaked in the error message. </p><p>With this attack, it is possible to detect redirects, leak redirect locations, and sensitive query parameters. </p><img src="/chenduo-blog.github.io/2022/09/27/Cross-site-leaks%E7%A0%94%E7%A9%B6/Jietu20220927-145147.jpg" class>]]></content>
    
    
    <categories>
      
      <category>security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>study</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL_Learning_Note_One</title>
    <link href="/chenduo-blog.github.io/2022/09/15/MySQL_Lerning_note/"/>
    <url>/chenduo-blog.github.io/2022/09/15/MySQL_Lerning_note/</url>
    
    <content type="html"><![CDATA[<h1 id="计算机语言"><a href="#计算机语言" class="headerlink" title="计算机语言"></a>计算机语言</h1><h2 id="机器语言"><a href="#机器语言" class="headerlink" title="机器语言"></a>机器语言</h2><h2 id="汇编语言"><a href="#汇编语言" class="headerlink" title="汇编语言"></a>汇编语言</h2><h2 id="高级语言"><a href="#高级语言" class="headerlink" title="高级语言"></a>高级语言</h2><h1 id="sql-语言基础"><a href="#sql-语言基础" class="headerlink" title="sql 语言基础"></a>sql 语言基础</h1><h2 id="语法特点"><a href="#语法特点" class="headerlink" title="语法特点"></a>语法特点</h2><ul><li>sql 对关键字的大小写不敏感</li><li>sql语句可以以单行或者多行书写，以分行结束</li><li>sql的注释<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">-- 单行注， -- 后面一定要加空格</span><br>#单行注释，#后面可加空格可不加空格<br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> emp; <span class="hljs-comment">-- 这里是注释</span><br></code></pre></td></tr></table></figure>/*<br>多行注释<br>多行注释</li></ul><p>*/</p><h1 id="数据库系统简介"><a href="#数据库系统简介" class="headerlink" title="数据库系统简介"></a>数据库系统简介</h1><h2 id="关系型数据库（RDBMS）"><a href="#关系型数据库（RDBMS）" class="headerlink" title="关系型数据库（RDBMS）"></a>关系型数据库（RDBMS）</h2><p>Oracle 数据库<br>Mysql数据库<br>SQL server数据库<br>PostgreSQL<br>SQLite</p><h2 id="非关系数据库（NoSQL）"><a href="#非关系数据库（NoSQL）" class="headerlink" title="非关系数据库（NoSQL）"></a>非关系数据库（NoSQL）</h2><p>Redis<br>MongoDB<br>Elasticserach<br>Cassandra<br>HBase</p><h1 id="sql和数据库管理系统的关系"><a href="#sql和数据库管理系统的关系" class="headerlink" title="sql和数据库管理系统的关系"></a>sql和数据库管理系统的关系</h1><ul><li>SQL是一种用于操作数据库的语言，SQL适用于所有关系型数据库。</li><li>MySQL, Oracle ,SQLServer 是一个数据库软件，这些数据库软件支持SQL，也就是通过SQL可以使用这些软件，不过每一个数据库系统会在标准SQL的基础上扩展自己的SQL语法。</li><li>大部分的NoSQL有自己的语言，对SQL的支持并不好</li></ul><h1 id="MySQL版本"><a href="#MySQL版本" class="headerlink" title="MySQL版本"></a>MySQL版本</h1><h2 id="MySQL-Community-Server"><a href="#MySQL-Community-Server" class="headerlink" title="MySQL Community Server"></a>MySQL Community Server</h2><p>社区版，免费</p><h2 id="MySQL-Enterprise-Edition"><a href="#MySQL-Enterprise-Edition" class="headerlink" title="MySQL Enterprise Edition"></a>MySQL Enterprise Edition</h2><h2 id="MySQL-Cluster"><a href="#MySQL-Cluster" class="headerlink" title="MySQL Cluster"></a>MySQL Cluster</h2><h2 id="……等"><a href="#……等" class="headerlink" title="……等"></a>……等</h2><h1 id="数据库操作指令"><a href="#数据库操作指令" class="headerlink" title="数据库操作指令"></a>数据库操作指令</h1><h2 id="数据库相关操作"><a href="#数据库相关操作" class="headerlink" title="数据库相关操作"></a>数据库相关操作</h2><h3 id="终端执行"><a href="#终端执行" class="headerlink" title="终端执行"></a>终端执行</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">mysql -u root -<span class="hljs-selector-tag">p</span><br></code></pre></td></tr></table></figure><h3 id="退出数据库"><a href="#退出数据库" class="headerlink" title="退出数据库"></a>退出数据库</h3><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">quit<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="查询所有数据库"><a href="#查询所有数据库" class="headerlink" title="查询所有数据库"></a>查询所有数据库</h3><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">show databases<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="创建数据库："><a href="#创建数据库：" class="headerlink" title="创建数据库："></a>创建数据库：</h3><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> 数据库名称;<br></code></pre></td></tr></table></figure><h3 id="查看数据库详情："><a href="#查看数据库详情：" class="headerlink" title="查看数据库详情："></a>查看数据库详情：</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> 数据库名称<br></code></pre></td></tr></table></figure><h3 id="创建数据库（指定字符集）："><a href="#创建数据库（指定字符集）：" class="headerlink" title="创建数据库（指定字符集）："></a>创建数据库（指定字符集）：</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> 数据库名称 <span class="hljs-type">character</span> <span class="hljs-keyword">set</span> gbk/utf8;<br></code></pre></td></tr></table></figure><h3 id="删除数据库："><a href="#删除数据库：" class="headerlink" title="删除数据库："></a>删除数据库：</h3><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">database</span> 数据库名称;<br></code></pre></td></tr></table></figure><h3 id="使用数据库："><a href="#使用数据库：" class="headerlink" title="使用数据库："></a>使用数据库：</h3><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">use 数据库名称<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h1 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h1><h2 id="常用图形工具"><a href="#常用图形工具" class="headerlink" title="常用图形工具"></a>常用图形工具</h2><h3 id="Navicat"><a href="#Navicat" class="headerlink" title="Navicat"></a>Navicat</h3><h3 id="SQLyog"><a href="#SQLyog" class="headerlink" title="SQLyog"></a>SQLyog</h3><h3 id="MySQL-Workbench"><a href="#MySQL-Workbench" class="headerlink" title="MySQL Workbench"></a>MySQL Workbench</h3><h2 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h2><h3 id="DataGrip"><a href="#DataGrip" class="headerlink" title="DataGrip"></a>DataGrip</h3><h3 id="phpMyAdmin"><a href="#phpMyAdmin" class="headerlink" title="phpMyAdmin"></a>phpMyAdmin</h3><h3 id="MySQLDumper"><a href="#MySQLDumper" class="headerlink" title="MySQLDumper"></a>MySQLDumper</h3>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>study</tag>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 70_climbing stairs（Java）</title>
    <link href="/chenduo-blog.github.io/2022/09/10/LeetCode_70(%E6%AF%8F%E6%97%A5)/"/>
    <url>/chenduo-blog.github.io/2022/09/10/LeetCode_70(%E6%AF%8F%E6%97%A5)/</url>
    
    <content type="html"><![CDATA[<p>dp问题<br>难度：easy</p><hr><h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h1><p>You are climbing a staircase. It takes n steps to reach the top.<br>Each time you can either climb 1 or 2 steps.<br>In how many distinct ways can you climb to the top? </p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">Example <span class="hljs-number">1</span>:<br><br><span class="hljs-symbol">Input:</span> n = <span class="hljs-number">2</span><br><span class="hljs-symbol">Output:</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">Explanation:</span> There are two ways <span class="hljs-keyword">to</span> climb <span class="hljs-keyword">to</span> the top.<br><span class="hljs-number">1</span>. <span class="hljs-number">1</span> <span class="hljs-keyword">step</span> + <span class="hljs-number">1</span> <span class="hljs-keyword">step</span><br><span class="hljs-number">2</span>. <span class="hljs-number">2</span> steps<br>Example <span class="hljs-number">2</span>:<br><br><span class="hljs-symbol">Input:</span> n = <span class="hljs-number">3</span><br><span class="hljs-symbol">Output:</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">Explanation:</span> There are three ways <span class="hljs-keyword">to</span> climb <span class="hljs-keyword">to</span> the top.<br><span class="hljs-number">1</span>. <span class="hljs-number">1</span> <span class="hljs-keyword">step</span> + <span class="hljs-number">1</span> <span class="hljs-keyword">step</span> + <span class="hljs-number">1</span> <span class="hljs-keyword">step</span><br><span class="hljs-number">2</span>. <span class="hljs-number">1</span> <span class="hljs-keyword">step</span> + <span class="hljs-number">2</span> steps<br><span class="hljs-number">3</span>. <span class="hljs-number">2</span> steps + <span class="hljs-number">1</span> <span class="hljs-keyword">step</span><br></code></pre></td></tr></table></figure><p> </p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">Constraints:</span><br><span class="hljs-number">1</span> &lt;= n &lt;= <span class="hljs-number">45</span><br>来源：力扣（LeetCode）<br></code></pre></td></tr></table></figure><hr><h1 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">climbStairs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br><br>    <span class="hljs-keyword">if</span>(n&lt;=<span class="hljs-number">2</span>)&#123;<br><br>    <span class="hljs-keyword">return</span> n;<br><br>    &#125;<br><br>    <span class="hljs-keyword">int</span> [] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n];<br><br>    dp[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><br>    dp[<span class="hljs-number">1</span>] = <span class="hljs-number">2</span>;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>;i &lt; n;i++)&#123;<br><br>        dp[i] = dp[i-<span class="hljs-number">1</span>] + dp[i-<span class="hljs-number">2</span>];<br><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> dp[n-<span class="hljs-number">1</span>];<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>record</tag>
      
      <tag>study</tag>
      
      <tag>コードテスト</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MACOS配置MySQL(最新)</title>
    <link href="/chenduo-blog.github.io/2022/09/02/MACOS_MySQL%E9%85%8D%E7%BD%AE%EF%BC%88%E6%9C%80%E6%96%B0%EF%BC%89/"/>
    <url>/chenduo-blog.github.io/2022/09/02/MACOS_MySQL%E9%85%8D%E7%BD%AE%EF%BC%88%E6%9C%80%E6%96%B0%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="MACOS配置MySQL"><a href="#MACOS配置MySQL" class="headerlink" title="MACOS配置MySQL"></a>MACOS配置MySQL</h1><p>安装成功后，使用mysql命令回报：command not found 的错误，是因为还没有配置环境变量。配置环境变量首先要知道你使用的Mac OS X是什么样的Shell，打开终端，输入：echo $SHELL 回车执行如果输出的是：csh或者是tcsh，那么你用的就是C Shell。如果输出的是：bash，sh，zsh，那么你的用的可能就是Bourne Shell的一个变种。Mac OS X 10.2之前默认的是C Shell。Mac OS X 10.3之后默认的是Bourne Shell。我的是bash。</p><p>输入：<code>cd /usr/local/mysql</code>，回车执行然后输入：<code>sudo vim .bash_profile</code> ，回车执行需要输入root用户密码。sudo是使用root用户修改环境变量文件。进入编辑器后，我们先按”i”，即切换到“插入”状态。就可以通过上下左右移动光标，或空格、退格及回车等进行编辑内容了，和WINDOWS是一样的了。(注意文件位置)</p><p>在文档的最下方输入：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">export PATH=<span class="hljs-variable">$&#123;</span>PATH&#125;<span class="hljs-symbol">:/usr/local/mysql/bin`</span><br></code></pre></td></tr></table></figure><p>然后按Esc退出insert状态，并在最下方输入:wq保存退出(或直接按<code>shift+zz</code>，或者切换到大写模式按ZZ，就可以保存退出了)。最后输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> .bash_profile<br></code></pre></td></tr></table></figure><p>回车执行，运行环境变量。再输入mysql命令，</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">mysql -u root -<span class="hljs-selector-tag">p</span><br></code></pre></td></tr></table></figure><p>即可使用。</p><p>输入</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">show databases<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>如果显示数据库就代表安装成功了。就代表安装成功了。</p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>study</tag>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>8月のビデオカード</title>
    <link href="/chenduo-blog.github.io/2022/08/12/8%E6%9C%88%E6%98%BE%E5%8D%A1/"/>
    <url>/chenduo-blog.github.io/2022/08/12/8%E6%9C%88%E6%98%BE%E5%8D%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="最新ニュース"><a href="#最新ニュース" class="headerlink" title="最新ニュース"></a>最新ニュース</h1><p>RTX 40系ー＞10月<br>RX 7000系ー＞11月</p><h1 id="AMD-or-NVIDIA"><a href="#AMD-or-NVIDIA" class="headerlink" title="AMD or NVIDIA"></a>AMD or NVIDIA</h1><p>AMD最新一代的RX6000系列，传统光栅性能已经非常接近NVIDIA同级别的RTX30系列，但是在光追性能方面依然有很大的差距。</p><p>結論：NVIDIA is better.</p><h1 id="How-to-choose-ビデオカードの型番"><a href="#How-to-choose-ビデオカードの型番" class="headerlink" title="How to choose ビデオカードの型番"></a>How to choose ビデオカードの型番</h1><p>1080P おすすめ：RTX3050　or 以下</p><p>2K　　おすすめ：RTX 3060/RX 6600XT　or 以上</p><p>4K　　おすすめ：RTX 3080/RX 6800XT　or 以上</p><h1 id="How-to-choose-ビデオカードのブランド名"><a href="#How-to-choose-ビデオカードのブランド名" class="headerlink" title="How to choose ビデオカードのブランド名"></a>How to choose ビデオカードのブランド名</h1><p>ASUS , MSI , GALAX , 玄人志向, GIGABYTE<br>ASUS , MSI おすすめです。</p><hr><p>中国<br>N卡阵营：<br>一线品牌：华硕、微星<br>二三线品牌：七彩虹、索泰、影驰、映众、耕升、翔升、铭瑄、昂达等</p><p>A卡阵营：<br>一线品牌：蓝宝石、迪兰恒进、华硕<br>二三线品牌：讯景、憾讯、华擎、盈通等</p>]]></content>
    
    
    <categories>
      
      <category>PC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>パソコン</tag>
      
      <tag>ビデオカード</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo无法加载图片解决方法</title>
    <link href="/chenduo-blog.github.io/2022/07/21/hexo%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E5%9B%BE%E7%89%87%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <url>/chenduo-blog.github.io/2022/07/21/hexo%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E5%9B%BE%E7%89%87%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>版本：Hexo 3以上　　<br>最近搭建hexo博客时遇到了图片部署后不显示的问题</p><p>上网找了很多方式都没有完美解决问题，后来查看了官方文档后终于解决了问题（完美解决）<br>建议以后大家遇到了问题也先去看看官方文档：<a href="https://hexo.io/zh-cn/docs">https://hexo.io/zh-cn/docs</a></p><p>解决方案如下：</p><h1 id="在根目录下配置文件-config-yml中"><a href="#在根目录下配置文件-config-yml中" class="headerlink" title="在根目录下配置文件_config.yml中"></a>在根目录下配置文件_config.yml中</h1><p>post_asset_folder:false改为true</p><p>这样在建立文件时，Hexo会自动建立一个与文章同名的文件夹，<br>这样就可以把与该文章相关的所有资源（图片）都放到那个文件夹里方便后面引用。</p><ul><li>ps:使用命令行创建会自动建立同名文件夹,不使用命令行不会自动创建，可以自己创建文件夹</li></ul><p>　</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">hexo n 文件名<br></code></pre></td></tr></table></figure><h1 id="git-bash安装插件"><a href="#git-bash安装插件" class="headerlink" title="git bash安装插件"></a>git bash安装插件</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install https:<span class="hljs-comment">//github.com/7ym0n/hexo-asset-image --save</span><br></code></pre></td></tr></table></figure><ul><li>（这是个修改过的插件，经测试无问题），使用这个插件来引入图片，而不是网上那些方法里说的用传统md语法相对路径的方法。</li></ul><h1 id="插入图片时用这种方式"><a href="#插入图片时用这种方式" class="headerlink" title="插入图片时用这种方式"></a>插入图片时用这种方式</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;% asset_img test.jpg This is an test image %&#125;<br></code></pre></td></tr></table></figure><ul><li>其中test.jpg就是要引用的图片，后面的This is an test image是图片描述，可以自己修改(可以删除，不需要)。</li></ul><h1 id="这样就能成功显示了"><a href="#这样就能成功显示了" class="headerlink" title="这样就能成功显示了"></a>这样就能成功显示了</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">hexo cl <br>hexo g <br>hexo d<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>新建博客页面</title>
    <link href="/chenduo-blog.github.io/2022/07/15/%E6%96%B0%E5%BB%BA%E5%8D%9A%E5%AE%A2%E9%A1%B5%E9%9D%A2%E6%96%B9%E6%B3%95%EF%BC%88%E6%9C%80%E6%96%B0%EF%BC%89/"/>
    <url>/chenduo-blog.github.io/2022/07/15/%E6%96%B0%E5%BB%BA%E5%8D%9A%E5%AE%A2%E9%A1%B5%E9%9D%A2%E6%96%B9%E6%B3%95%EF%BC%88%E6%9C%80%E6%96%B0%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="第一步-新建文件"><a href="#第一步-新建文件" class="headerlink" title="第一步 新建文件"></a>第一步 新建文件</h1><ul><li>和about创建一样，可以用命令行也可以复制过来<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">hexo n 文件名<br></code></pre></td></tr></table></figure><img src="/chenduo-blog.github.io/2022/07/15/%E6%96%B0%E5%BB%BA%E5%8D%9A%E5%AE%A2%E9%A1%B5%E9%9D%A2%E6%96%B9%E6%B3%95%EF%BC%88%E6%9C%80%E6%96%B0%EF%BC%89/Jietu20220813-203834.jpg" class></li></ul><h1 id="第二步-修改index-md的配置"><a href="#第二步-修改index-md的配置" class="headerlink" title="第二步 修改index.md的配置"></a>第二步 修改index.md的配置</h1><p>现在已经不需要设置 layout属性</p><img src="/chenduo-blog.github.io/2022/07/15/%E6%96%B0%E5%BB%BA%E5%8D%9A%E5%AE%A2%E9%A1%B5%E9%9D%A2%E6%96%B9%E6%B3%95%EF%BC%88%E6%9C%80%E6%96%B0%EF%BC%89/Jietu20220813-204008.jpg" class><h1 id="第三步-修改config-fluid配置"><a href="#第三步-修改config-fluid配置" class="headerlink" title="第三步 修改config.fluid配置"></a>第三步 修改config.fluid配置</h1><p>1.首先配置menu菜单 (最容易被忽略就是这一步)</p><ul><li>新增页面  <img src="/chenduo-blog.github.io/2022/07/15/%E6%96%B0%E5%BB%BA%E5%8D%9A%E5%AE%A2%E9%A1%B5%E9%9D%A2%E6%96%B9%E6%B3%95%EF%BC%88%E6%9C%80%E6%96%B0%EF%BC%89/Jietu20220813-204133.jpg" class></li></ul><p>2.再配置页面</p><img src="/chenduo-blog.github.io/2022/07/15/%E6%96%B0%E5%BB%BA%E5%8D%9A%E5%AE%A2%E9%A1%B5%E9%9D%A2%E6%96%B9%E6%B3%95%EF%BC%88%E6%9C%80%E6%96%B0%EF%BC%89/Jietu20220813-204608.jpg" class><h1 id="第四步-重启服务"><a href="#第四步-重启服务" class="headerlink" title="第四步 重启服务"></a>第四步 重启服务</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">hexo clean<br><br>hexo g<br><br>hexo s 或者 hexo d<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Blog update messages</title>
    <link href="/chenduo-blog.github.io/2022/07/10/blog-news/"/>
    <url>/chenduo-blog.github.io/2022/07/10/blog-news/</url>
    
    <content type="html"><![CDATA[<div class="note note-primary">            <p>Last update 2022.09.10</p>          </div><div class="note note-success">            <p>Create at  2022.07.10</p>          </div><h1 id="2022年"><a href="#2022年" class="headerlink" title="2022年"></a>2022年</h1><h2 id="9月"><a href="#9月" class="headerlink" title="9月"></a>9月</h2><ul><li><p>Java_Learning_Note </p></li><li><p>MySQL_Note</p></li></ul><p><a href="https://tarvent.github.io/chenduo-blog.github.io/2022/09/02/MACOS_MySQL%E9%85%8D%E7%BD%AE%EF%BC%88%E6%9C%80%E6%96%B0%EF%BC%89/">macos配置MySQL</a></p><h2 id="8月"><a href="#8月" class="headerlink" title="8月"></a>8月</h2><ul><li>パソコン改装</li></ul><p><a href="https://tarvent.github.io/chenduo-blog.github.io/2022/08/12/8%E6%9C%88%E6%98%BE%E5%8D%A1/">ビデオカードについて</a></p><h2 id="7月"><a href="#7月" class="headerlink" title="7月"></a>7月</h2><ul><li>blog</li></ul><p><a href="https://tarvent.github.io/chenduo-blog.github.io/2022/07/21/hexo%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E5%9B%BE%E7%89%87%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/">hexo加载图片问题</a></p><p><a href="https://tarvent.github.io/chenduo-blog.github.io/2022/07/15/%E6%96%B0%E5%BB%BA%E5%8D%9A%E5%AE%A2%E9%A1%B5%E9%9D%A2%E6%96%B9%E6%B3%95%EF%BC%88%E6%9C%80%E6%96%B0%EF%BC%89/">博客创建新页面方法</a></p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Install Xcode Command Line Tools</title>
    <link href="/chenduo-blog.github.io/2022/06/12/Install%20Xcode%20Command%20Line%20Tools/"/>
    <url>/chenduo-blog.github.io/2022/06/12/Install%20Xcode%20Command%20Line%20Tools/</url>
    
    <content type="html"><![CDATA[<h1 id="Xcode-Command-Line-Tools"><a href="#Xcode-Command-Line-Tools" class="headerlink" title="Xcode Command Line Tools"></a>Xcode Command Line Tools</h1><ul><li>What are Xcode Command Line Tools</li></ul><p>These are tools for software developers that run on the command line, that is, in the Terminal application (also called the console). These tools have been used for programming on Unix operating systems since computing’s beginnings, serving as the foundation of almost all software development.</p><p>Out of the box, a Mac doesn’t contain all of the software and tools needed for programming. Instead, Apple provides a complete development environment for programmers named Xcode, which is available separately for download and installation. The full Xcode package is huge, requiring over 40GB of disk space, and supports development for all Apple operating systems. Many software developers, particularly web application developers, are using Macs but aren’t developing software for Apple devices. They still need the Unix-like tools and utilities installed with the Xcode package. Fortunately, Apple provides a separate and much smaller download, the Xcode Command Line Tools, that installs the most-needed utilities for software development. You can install this smaller package from the Terminal application or as part of installing Homebrew, the popular Mac package manager.</p><h1 id="With-Homebrew"><a href="#With-Homebrew" class="headerlink" title="With Homebrew"></a>With Homebrew</h1><p>Most developers need additional programming languages and utilities that don’t come installed on macOS and are not included in the Xcode Command Line Tools package. You can use Homebrew, the popular Mac package manager, to install almost any open source developer tool. Homebrew will install Xcode Command Line Tools as part of its installation process. Since you’ll probably need Homebrew, you might as well let Homebrew install Xcode Command Line Tools for you. </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JS">xcode-select --install <br>xcode-select --version<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MAC</category>
      
      <category>XCODE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记录</tag>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue3部署githubpage空白</title>
    <link href="/chenduo-blog.github.io/2022/05/31/vue3%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2githubpage%E7%A9%BA%E7%99%BD/"/>
    <url>/chenduo-blog.github.io/2022/05/31/vue3%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2githubpage%E7%A9%BA%E7%99%BD/</url>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>在页面完成后，打包上线页面出现白屏问题。百度到的，解决办法是，改变config文件夹下，index.js中，build下的 assetsPublicPath：”/“ =&gt; assetsPublicPath：”./“。<br>随后发现创建的是vue3的项目没有config文件夹。</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>在项目根目录，创建 vue.config.js 文件，文件内容如下：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">module</span>.<span class="hljs-built_in">exports</span>=&#123;<br>    publicPath:<span class="hljs-string">&quot;./&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>github</category>
      
    </categories>
    
    
    <tags>
      
      <tag>record</tag>
      
      <tag>study</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>paiza --B096:爆弾の大爆発</title>
    <link href="/chenduo-blog.github.io/2022/05/30/paizab096%E7%88%86%E5%BC%BE%E3%81%AE%E5%A4%A7%E7%88%86%E7%99%BA/"/>
    <url>/chenduo-blog.github.io/2022/05/30/paizab096%E7%88%86%E5%BC%BE%E3%81%AE%E5%A4%A7%E7%88%86%E7%99%BA/</url>
    
    <content type="html"><![CDATA[<p>很有意思的题目<br>难度：easy~medium</p><hr><h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h1><p>あなたは今、とある戦略ゲームをプレイしています。<br>ゲームの中で、敵を攻撃するために、フィールドに爆弾を仕掛けました。<br>敵がフィールド内に入ったところで一気に爆弾を点火し、敵に攻撃をする寸法です。</p><p>フィールドは縦 H 行、横 W 行のマス目としてあらわされ、これらのマス目のうちのいくつかに爆弾が仕掛けてあります。<br>i 行目、j 列目の爆弾が爆発すると、i 行目全体と j 列目全体に爆風が広がります。<br>あなたはすでにフィールド上に爆弾を仕掛け終わりました。<br>フィールド上の爆弾を一気に点火した場合、いくつのマスに爆風が広がるかを計算してください。</p><p>例えば、入力例 1 では以下のマスに爆風が広がるため、求めるべきマス目数は 12 になります。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">入力例1<br>4 4<br>#.#.<br><span class="hljs-code">....</span><br><span class="hljs-code">..#.</span><br><span class="hljs-code">....</span><br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">出力例1<br>12<br></code></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">入力例2<br>5 8<br>.#.#....<br><span class="hljs-code">........</span><br><span class="hljs-code">........</span><br><span class="hljs-code">........</span><br>.....#..<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">25<br></code></pre></td></tr></table></figure><hr><h1 id="Notice"><a href="#Notice" class="headerlink" title="Notice"></a>Notice</h1><p>1.需要注意读取有十位数百位数以上。<br>2.js中字符串不能改变，改成数组</p><h1 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs js">process.stdin.resume();<br>process.stdin.setEncoding(<span class="hljs-string">&#x27;utf8&#x27;</span>);<br><span class="hljs-comment">// 自分の得意な言語で</span><br><span class="hljs-comment">// Let&#x27;s チャレンジ！！</span><br><span class="hljs-keyword">var</span> lines = [];<br><span class="hljs-keyword">var</span> reader = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;readline&#x27;</span>).createInterface(&#123;<br><span class="hljs-attr">input</span>: process.stdin,<br><span class="hljs-attr">output</span>: process.stdout<br>&#125;);<br>reader.on(<span class="hljs-string">&#x27;line&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">line</span>) =&gt;</span> &#123;<br>lines.push(line);<br>&#125;);<br>reader.on(<span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-keyword">var</span> N=lines[<span class="hljs-number">0</span>];<br><br><span class="hljs-keyword">var</span> n = N.substring(<span class="hljs-number">0</span>, N.indexOf(<span class="hljs-string">&quot; &quot;</span>));<br><br><span class="hljs-keyword">var</span> m = N.substring(N.indexOf(<span class="hljs-string">&quot; &quot;</span>)+<span class="hljs-number">1</span>,N.length);<br><span class="hljs-comment">//注意一位数以上的索引和截取</span><br><span class="hljs-keyword">const</span> coor = [];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> j=<span class="hljs-number">0</span>; j&lt;=m;j++)&#123;<br>        <span class="hljs-keyword">if</span>(lines[i][j]==<span class="hljs-string">&#x27;#&#x27;</span>)&#123;<br>            coor.push([i,j]);<br>        &#125;<br>    &#125;<br>&#125;<span class="hljs-comment">//获取坐标炸弹</span><br><br><br><br><span class="hljs-keyword">const</span> result=[];<br><br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;=n;i++)&#123;<br>    result.push(lines[i].split(<span class="hljs-string">&#x27;&#x27;</span>));<br>&#125;<span class="hljs-comment">//change to 数组</span><br><br><br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;coor.length;i++)&#123;<br>    <span class="hljs-keyword">var</span> x=coor[i][<span class="hljs-number">0</span>];<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> j=<span class="hljs-number">0</span>;j&lt;m;j++)&#123;<br>        result[x][j]=<span class="hljs-string">&#x27;#&#x27;</span>;<br>    &#125;<br>&#125;<span class="hljs-comment">//横坐标</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;coor.length;i++)&#123;<br>    <span class="hljs-keyword">var</span> y= coor[i][<span class="hljs-number">1</span>];<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)&#123;<br>        <span class="hljs-keyword">if</span>(result[j][y]!=<span class="hljs-string">&#x27;#&#x27;</span>)&#123;<br>            result[j][y]=<span class="hljs-string">&#x27;#&#x27;</span>;<br>        &#125;<br><br>    &#125;<br>&#125;<span class="hljs-comment">//纵坐标</span><br><br><span class="hljs-keyword">var</span> z = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;=n;i++)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> j=<span class="hljs-number">0</span>;j&lt;=m;j++)&#123;<br>        <span class="hljs-keyword">if</span>(result[i][j]==<span class="hljs-string">&#x27;#&#x27;</span>)&#123;<br>            z++;<br>        &#125;<br>    &#125;<br>&#125;<span class="hljs-comment">//count z</span><br><br><span class="hljs-built_in">console</span>.log(z);<br>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>record</tag>
      
      <tag>study</tag>
      
      <tag>コードテスト</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript字符串数组</title>
    <link href="/chenduo-blog.github.io/2022/04/30/js%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E7%BB%84/"/>
    <url>/chenduo-blog.github.io/2022/04/30/js%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h1 id="js字符串替换"><a href="#js字符串替换" class="headerlink" title="js字符串替换"></a>js字符串替换</h1><p>在JavaScript中，字符串是不可变的</p><p>需要自己定义<code>replaceAt()</code></p><p>1.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">String</span>.prototype.replaceAt=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">index, replacement</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.substr(<span class="hljs-number">0</span>, index) + replacement+ <span class="hljs-built_in">this</span>.substr(index + replacement.length);<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> hello=<span class="hljs-string">&quot;Hello World&quot;</span>;<br>alert(hello.replaceAt(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;!!&quot;</span>)); <span class="hljs-comment">//should display He!!o World</span><br></code></pre></td></tr></table></figure><p>2.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> replaceStr1 = <span class="hljs-function">(<span class="hljs-params">str, index, char</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> strAry = str.split(<span class="hljs-string">&#x27;&#x27;</span>);<br>    strAry[index] = char;<br>    <span class="hljs-keyword">return</span> strAry.join(<span class="hljs-string">&#x27;&#x27;</span>);<br>  &#125;<br>  replaceStr(str1, <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;-&#x27;</span>); <span class="hljs-comment">// =&gt; Good-Morning</span><br>  replaceStr(str2, <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;-&#x27;</span>); <span class="hljs-comment">// =&gt; Hell- World</span><br></code></pre></td></tr></table></figure><h1 id="js字符转数组"><a href="#js字符转数组" class="headerlink" title="js字符转数组"></a>js字符转数组</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 第一种 split拆分 &quot;abc&quot;.split(&#x27;&#x27;) ==&gt; [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;] </span><br><span class="hljs-comment">// 第二种 [...] [...&quot;abc&quot;] ==&gt; [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;] Array.from(&quot;abc&quot;) ==&gt; [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</span><br><br>lines[i].split(<span class="hljs-string">&#x27;&#x27;</span>)；<br></code></pre></td></tr></table></figure><h1 id="js-截取前后字符"><a href="#js-截取前后字符" class="headerlink" title="js 截取前后字符"></a>js 截取前后字符</h1><p>前</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//前</span><br><span class="hljs-function"><span class="hljs-title">publicstaticvoidsubstringTest01</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">String</span> str = <span class="hljs-string">&quot;http_https://www.baidu.com/&quot;</span>;<br>    <span class="hljs-comment">//截取_之前字符串</span><br>    <span class="hljs-built_in">String</span> str1 = str.substring(<span class="hljs-number">0</span>, str.indexOf(<span class="hljs-string">&quot;_&quot;</span>));<br>    System.out.println(<span class="hljs-string">&quot;截取_之前字符串:&quot;</span>+str1);<br>&#125;<br></code></pre></td></tr></table></figure><p>后</p>]]></content>
    
    
    <categories>
      
      <category>javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>study</tag>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>paiza --C084</title>
    <link href="/chenduo-blog.github.io/2022/03/14/paizaC084/"/>
    <url>/chenduo-blog.github.io/2022/03/14/paizaC084/</url>
    
    <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h1><p>あなたは友人に向けてメールを送ろうとしています。<br>ただメールを送るだけではつまらないので、文字列を装飾して送ることにしました。<br>送りたい文字列の周囲を “+” で枠のように囲んで装飾します。</p><p>このような処理を手作業で行いたくないため、プログラムで装飾しようとしています。<br>この “+” の枠で囲む装飾をするプログラムを書いてください。</p><p>入力例 1 では “Paiza” という文字列を送ります。<br>この文字を枠で囲み装飾すると、以下のようになります。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">+++++++<br>+Paiza+<br>+++++++<br></code></pre></td></tr></table></figure><hr><h1 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js">process.stdin.resume();<br>process.stdin.setEncoding(<span class="hljs-string">&#x27;utf8&#x27;</span>);<br><span class="hljs-comment">// 自分の得意な言語で</span><br><span class="hljs-comment">// Let&#x27;s チャレンジ！！</span><br><span class="hljs-keyword">var</span> lines = [];<br><span class="hljs-keyword">var</span> reader = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;readline&#x27;</span>).createInterface(&#123;<br><span class="hljs-attr">input</span>: process.stdin,<br><span class="hljs-attr">output</span>: process.stdout<br>&#125;);<br>reader.on(<span class="hljs-string">&#x27;line&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">line</span>) =&gt;</span> &#123;<br>lines.push(line);<br>&#125;);<br>reader.on(<span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-keyword">var</span> N = lines[<span class="hljs-number">0</span>].length + <span class="hljs-number">2</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)&#123;<br>process.stdout.write(<span class="hljs-string">&#x27;+&#x27;</span>);<br>&#125;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;\n+&#x27;</span>+lines[<span class="hljs-number">0</span>]+<span class="hljs-string">&#x27;+&#x27;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; N ; j ++)&#123;<br>process.stdout.write(<span class="hljs-string">&#x27;+&#x27;</span>);<br>&#125;&#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>record</tag>
      
      <tag>study</tag>
      
      <tag>コードテスト</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在 vue eslint 报错 error “Component name  should always be multi-word”，该怎么办？</title>
    <link href="/chenduo-blog.github.io/2022/03/07/vueelint%E6%8A%A5%E9%94%99multi-word/"/>
    <url>/chenduo-blog.github.io/2022/03/07/vueelint%E6%8A%A5%E9%94%99multi-word/</url>
    
    <content type="html"><![CDATA[<h1 id="出现的问题："><a href="#出现的问题：" class="headerlink" title="出现的问题："></a>出现的问题：</h1><p> 在 vue-cli 创建的项目中，创建文件并命名后，会报  “Component name “****” should always be multi-word”报错；<br> <figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs applescript"> <span class="hljs-number">1</span>:<span class="hljs-number">1</span>  <span class="hljs-keyword">error</span>  Component <span class="hljs-built_in">name</span> <span class="hljs-string">&quot;index&quot;</span> should always be multi-<span class="hljs-built_in">word</span>  vue/multi-<span class="hljs-built_in">word</span>-component-names<br><br>✖ <span class="hljs-number">1</span> problem (<span class="hljs-number">1</span> <span class="hljs-keyword">error</span>, <span class="hljs-number">0</span> warnings)<br><br><br>webpack compiled <span class="hljs-keyword">with</span> <span class="hljs-number">1</span> <span class="hljs-keyword">error</span><br></code></pre></td></tr></table></figure></p><h1 id="报错的原因："><a href="#报错的原因：" class="headerlink" title="报错的原因："></a>报错的原因：</h1><p> 在组件命名的时候不够规范，根据 ESLint 官方风格指南，除了根组件（App.vue）外，自定义组<br>件名称应该由多单词组成（使用大驼峰命名方式或者用“-”连接单词），防止和 html 标签冲突;<br>而最新的 vue-cli 创建的项目使用了最新的 vue/cli-plugin-eslint 插件，在 vue/cli-plugin-eslint v7.20.0<br>版本之后就引用了 vue/multi-word-component-names 规则，所以在编译的时候判定此次错误</p><h1 id="方案一-：重命名-亲测有效"><a href="#方案一-：重命名-亲测有效" class="headerlink" title="方案一 ：重命名(亲测有效)"></a>方案一 ：重命名(亲测有效)</h1><p>文件的名称重命名<br>修改组件名为多个单词，使用驼峰命名方式或者用“-”连接单词。<br>myUser</p><h1 id="方案二-：配置-eslintrc-js文件（亲测有效）"><a href="#方案二-：配置-eslintrc-js文件（亲测有效）" class="headerlink" title="方案二 ：配置 .eslintrc.js文件（亲测有效）"></a>方案二 ：配置 .eslintrc.js文件（亲测有效）</h1><p>おすすめ！！！</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs vim">module.exports = &#123;<br>  roo<span class="hljs-variable">t:</span> true,<br>  <span class="hljs-keyword">en</span><span class="hljs-variable">v:</span> &#123;<br>    node: true<br>  &#125;,<br>  <span class="hljs-built_in">extend</span><span class="hljs-variable">s:</span> [<br>    <span class="hljs-string">&#x27;plugin:vue/vue3-essential&#x27;</span>,<br>    <span class="hljs-string">&#x27;@vue/standard&#x27;</span><br>  ],<br>  parserOption<span class="hljs-variable">s:</span> &#123;<br>    parser: <span class="hljs-string">&#x27;@babel/eslint-parser&#x27;</span><br>  &#125;,<br>  rule<span class="hljs-variable">s:</span> &#123;<br>    <span class="hljs-string">&#x27;no-console&#x27;</span>: process.env.NODE_ENV === <span class="hljs-string">&#x27;production&#x27;</span> ? <span class="hljs-string">&#x27;warn&#x27;</span> : <span class="hljs-string">&#x27;off&#x27;</span>,<br>    <span class="hljs-string">&#x27;no-debugger&#x27;</span>: process.env.NODE_ENV === <span class="hljs-string">&#x27;production&#x27;</span> ? <span class="hljs-string">&#x27;warn&#x27;</span> : <span class="hljs-string">&#x27;off&#x27;</span>,<br>    <span class="hljs-string">&#x27;indent&#x27;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-string">&#x27;space-before-function-paren&#x27;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-string">&#x27;vue/multi-word-component-names&#x27;</span>:<span class="hljs-string">&#x27;off&#x27;</span> //关闭命名规则，将不会校验组件名，官方建议设置是根据组件名进行忽略<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>vue3.2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MAC OS安装vue，vue commandない　ー　解決方法</title>
    <link href="/chenduo-blog.github.io/2022/02/20/vuecli_install%E5%95%8F%E9%A1%8C/"/>
    <url>/chenduo-blog.github.io/2022/02/20/vuecli_install%E5%95%8F%E9%A1%8C/</url>
    
    <content type="html"><![CDATA[<p>亲测！</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="安装vue，始终找不到命令"><a href="#安装vue，始终找不到命令" class="headerlink" title="安装vue，始终找不到命令"></a>安装vue，始终找不到命令</h2><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> install -g @vue/cli<br></code></pre></td></tr></table></figure><h2 id="安装顺利，使用发现不存在"><a href="#安装顺利，使用发现不存在" class="headerlink" title="安装顺利，使用发现不存在"></a>安装顺利，使用发现不存在</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">command</span> vue 不存在<br></code></pre></td></tr></table></figure><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> root -g<br></code></pre></td></tr></table></figure><p>正常的路径应该是 /usr/local/lib/node_modules，如果你的不是就要重新指定：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">npm<span class="hljs-built_in"> config </span><span class="hljs-builtin-name">set</span><span class="hljs-built_in"> prefix </span>/usr/local<br><br></code></pre></td></tr></table></figure><h1 id="Advice"><a href="#Advice" class="headerlink" title="Advice"></a>Advice</h1><p>不要用sudo 而是用包管理工具 ex: homebrew</p>]]></content>
    
    
    <categories>
      
      <category>vue3.2</category>
      
      <category>macos</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>全局安装npm包报错没有权限</title>
    <link href="/chenduo-blog.github.io/2021/06/14/npm%E6%97%A0root%E9%97%AE%E9%A2%98/"/>
    <url>/chenduo-blog.github.io/2021/06/14/npm%E6%97%A0root%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="npm-安装时提示没有权限"><a href="#npm-安装时提示没有权限" class="headerlink" title="npm 安装时提示没有权限"></a>npm 安装时提示没有权限</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">npm ERR! code EACCES<br>npm ERR! syscall rename<br>npm ERR! path <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/lib/</span>node_modules/npm<br>npm ERR! dest <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/lib/</span>node_modules/.npm-i9nnxROI<br>npm ERR! errno -<span class="hljs-number">13</span><br><br></code></pre></td></tr></table></figure><p>发现 node_module 的所有者是 root 下的</p><h1 id="换下目录所有者"><a href="#换下目录所有者" class="headerlink" title="换下目录所有者"></a>换下目录所有者</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo chown -R anna: <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/lib/</span>node_modules<br>chown 命令是将指定文件的拥有者改为指定的用户或组<br>参数 -R 处理指定目录以及其子目录下的所有文件<br>具体可以看下 chown 命令的介绍：www.cnblogs.com<span class="hljs-regexp">/peida/</span>archi…<br></code></pre></td></tr></table></figure><h1 id="ok"><a href="#ok" class="headerlink" title="ok"></a>ok</h1><p>这样 /usr/local/lib/node_modules 目录的所有者就更换完毕了，可以正常在全局安装 npm 包。</p>]]></content>
    
    
    <categories>
      
      <category>npm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记录</tag>
      
      <tag>frontend</tag>
      
      <tag>問題</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue3部署githubpage</title>
    <link href="/chenduo-blog.github.io/2021/06/11/vue%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2githubpage/"/>
    <url>/chenduo-blog.github.io/2021/06/11/vue%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2githubpage/</url>
    
    <content type="html"><![CDATA[<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">npm run <span class="hljs-keyword">build</span><br><span class="hljs-keyword"></span>git checkout -<span class="hljs-keyword">b </span>gh-pages<br>git <span class="hljs-keyword">add </span>-f <span class="hljs-keyword">dist</span><br><span class="hljs-keyword"></span>git commit -m <span class="hljs-string">&#x27;first commit&#x27;</span><br>git <span class="hljs-keyword">subtree </span>push --<span class="hljs-keyword">prefix </span><span class="hljs-keyword">dist </span><span class="hljs-keyword">origin </span>gh-pages<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>github</category>
      
    </categories>
    
    
    <tags>
      
      <tag>record</tag>
      
      <tag>study</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>呪術廻戦</title>
    <link href="/chenduo-blog.github.io/2021/05/02/zhoushuhuizhan/"/>
    <url>/chenduo-blog.github.io/2021/05/02/zhoushuhuizhan/</url>
    
    <content type="html"><![CDATA[<h1 id="領域展開とは"><a href="#領域展開とは" class="headerlink" title="領域展開とは"></a>領域展開とは</h1><p>領域展開とは、「術式を付与した生得領域を呪力で具現化」すること。</p><p>「術式」<br>「生得領域」</p><h1 id="術式・生得領域とは"><a href="#術式・生得領域とは" class="headerlink" title="術式・生得領域とは"></a>術式・生得領域とは</h1><p>術式とは「呪力を流し込んで技を発動すること」を指します。</p><h1 id="領域展開"><a href="#領域展開" class="headerlink" title="領域展開"></a>領域展開</h1><p>五条悟<br>無量空処<br>（むりょうくうしょ）</p><p>伏黒恵<br>嵌合暗翳庭<br>（かんごうあんえいてい）</p><p>両面宿儺<br>伏魔御厨子<br>（ふくまみづし）</p><p>漏瑚<br>蓋棺鉄囲山<br>（がいかんてっちせん）</p><p>真人<br>自閉円頓裹<br>（じへいえんどんか）</p><p>日車寛見<br>誅伏賜死<br>（ちょうぶくしし）</p>]]></content>
    
    
    <categories>
      
      <category>呪術廻戦</category>
      
    </categories>
    
    
    <tags>
      
      <tag>アニメ</tag>
      
      <tag>漫画</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web application security(书)</title>
    <link href="/chenduo-blog.github.io/2021/04/10/web%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0/"/>
    <url>/chenduo-blog.github.io/2021/04/10/web%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>web学习笔记</category>
      
      <category>web安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>record</tag>
      
      <tag>study</tag>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《遥远的救世主》读后</title>
    <link href="/chenduo-blog.github.io/2021/03/26/%E9%81%A5%E8%BF%9C%E7%9A%84%E6%95%91%E4%B8%96%E4%B8%BB/"/>
    <url>/chenduo-blog.github.io/2021/03/26/%E9%81%A5%E8%BF%9C%E7%9A%84%E6%95%91%E4%B8%96%E4%B8%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="1-三部曲"><a href="#1-三部曲" class="headerlink" title="1. 三部曲"></a>1. 三部曲</h1><ul><li>《背叛》</li><li>《遥远的就救世主》</li><li>《天幕红尘》</li></ul><h1 id="2-五台山论道"><a href="#2-五台山论道" class="headerlink" title="2. 五台山论道"></a>2. 五台山论道</h1><p>悟  </p><p>悟道休言天命， </p><p> 修行勿取真经。 </p><p> 一悲一喜一枯荣， </p><p> 哪个前生注定？  </p><p>袈裟本无清净，  </p><p>红尘不染性空。  </p><p>幽幽古刹千年钟，  </p><p>都是痴人说梦。</p><p>佛乃觉性，非人，人人都有觉性不等于觉性就是人。人相 可坏，觉性无生无灭，即觉即显，即障即尘蔽，无障不显，了障涅槃。觉行圆满之佛乃佛教人相之佛，圆满即止，即非无量。若佛有量，即非阿弥陀佛。佛法无量即 觉行无量，无圆无不圆，无满无不满，亦无是名究竟圆满。晚辈个人以为，佛教以次第而分，从精深处说是得道天成的道法，道法如来不可思议，即非文化。从浅义 处说是导人向善的教义，善恶本有人相、我相、众生相，即是文化。从众生处说是以贪制贪、以幻制幻的善巧，虽不灭败坏下流，却无碍抚慰灵魂的慈悲。</p><p>晚辈以为，传统观念的死结就在一个‘靠’字上，在家靠父母，出门靠朋友，靠上帝、靠菩萨、靠皇恩……总之靠什么都行，就是别靠自己。这是一个沉积了几千年的文 化属性问题，非几次新文化运动就能开悟。晚辈无意评说道法，只在已经缘起的事情里顺水推舟，借英雄好汉的嗓子喊上两声，至少不违天道朝纲。</p><h1 id="3-为什么自杀"><a href="#3-为什么自杀" class="headerlink" title="3. 为什么自杀"></a>3. 为什么自杀</h1><p>实事求是，不搞形式。这才叫当生则生，当死则死</p><h1 id="4-救主，自救"><a href="#4-救主，自救" class="headerlink" title="4. 救主，自救"></a>4. 救主，自救</h1><p>杀富富不去，救贫贫不离，扶贫是不治之治，不解决造血问题。救主不是人，是道，得救不是破了戒的狼吞虎咽，是觉悟。</p><h3 id="天道"><a href="#天道" class="headerlink" title="天道"></a>天道</h3><p>天是什么？ 天是神，是上帝，是创造万物者，是全能全知者，是遍在不可见者。天是道，是食物规律和自然法则。</p><p>了妄唯真即是神，人和神不一不异。</p>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
      <category>读后感</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ナルト20周年！！！！</title>
    <link href="/chenduo-blog.github.io/2019/07/01/%E3%83%8A%E3%83%AB%E3%83%8820%E5%91%A8%E5%B9%B4/"/>
    <url>/chenduo-blog.github.io/2019/07/01/%E3%83%8A%E3%83%AB%E3%83%8820%E5%91%A8%E5%B9%B4/</url>
    
    <content type="html"><![CDATA[<h1 id="永爱NARUTO"><a href="#永爱NARUTO" class="headerlink" title="永爱NARUTO!!!!!!!"></a>永爱NARUTO!!!!!!!</h1>]]></content>
    
    
    <categories>
      
      <category>naruto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>record</tag>
      
      <tag>アニメ</tag>
      
      <tag>漫画</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AboutGithub</title>
    <link href="/chenduo-blog.github.io/2018/08/25/AboutGithub/"/>
    <url>/chenduo-blog.github.io/2018/08/25/AboutGithub/</url>
    
    <content type="html"><![CDATA[<h1 id="github-基础"><a href="#github-基础" class="headerlink" title="github 基础"></a>github 基础</h1><h2 id="执行git"><a href="#执行git" class="headerlink" title="执行git"></a>执行git</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">git init<br></code></pre></td></tr></table></figure><h2 id="github-仓库链接"><a href="#github-仓库链接" class="headerlink" title="github 仓库链接"></a>github 仓库链接</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">git remote add origin [https ]<br></code></pre></td></tr></table></figure><h2 id="拉到本地防止冲突"><a href="#拉到本地防止冲突" class="headerlink" title="拉到本地防止冲突"></a>拉到本地防止冲突</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">git pull origin master(main)<br></code></pre></td></tr></table></figure><h2 id="提交本地缓存"><a href="#提交本地缓存" class="headerlink" title="提交本地缓存"></a>提交本地缓存</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">git add .<br></code></pre></td></tr></table></figure><h2 id="形成本地仓库的项目文件分支结构"><a href="#形成本地仓库的项目文件分支结构" class="headerlink" title="形成本地仓库的项目文件分支结构"></a>形成本地仓库的项目文件分支结构</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">git commit -m <span class="hljs-string">&#x27;first commit&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="本地仓库内容提交到github仓库"><a href="#本地仓库内容提交到github仓库" class="headerlink" title="本地仓库内容提交到github仓库"></a>本地仓库内容提交到github仓库</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">git push -u origin master<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
      <category>github</category>
      
    </categories>
    
    
    <tags>
      
      <tag>record</tag>
      
      <tag>study</tag>
      
      <tag>コードテスト</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Blog（hexo+git）</title>
    <link href="/chenduo-blog.github.io/2018/03/30/frist-md/"/>
    <url>/chenduo-blog.github.io/2018/03/30/frist-md/</url>
    
    <content type="html"><![CDATA[<p>一、安装</p><p>首先，需要安装node.js、npm和Git</p><p>Git可直接下载安装包进行安装。点击下载。安装后，需要下载xcode才可以。否则在使用中会遇到错误。这里我出现的问题是起初没有下载xcode，在后面初始化的时候，一直提示找不到Git，下载了xcode也不行，后来我打开了xcode，然后在关闭，就可以了。因为是小白，具体原因不明<br>接下来安装node.js。打开终端，输入命令<br>npm install -g hexo-cli<br>这里遇到的问题是，提示没有权限，于是在上面的命令增加了sudo，如下:</p><p>sudo npm install -g hexo-cli<br>然后安装node.js。我也是直接下载安装程序来进行安装的。点击下载<br>安装完后，可输入以下命令进行检查，输入每个命令后，都会弹出相应版本号。<br>node -v</p><p>npm -v</p><p>Git –version<br>然后在进行安装hexo，输入以下命令即可，遇到的问题与安装node.js类似。所以直接加了sudo</p><p>sudo npm install -g hexo<br>二、博客初始化</p><p>首先创建一个文件夹，该文件夹用于存储博客的文件。然后通过终端，进入到该文件夹，命令如下：</p><p>cd youblogfiles<br>然后初始化本地博客，输入以下命令。初始化时，切记文件夹要空的才可以，否则会初始化失败。若失败了建议删除文件夹在重新创建。</p><p>hexo init<br>完成后在进行安装npm</p><p>sudo npm install<br>执行下述命令生成本地网页文件并开启服务器，然后通过<a href="http://localhost:4000查看本地博客。">http://localhost:4000查看本地博客。</a></p><p>hexo g<br>hexo s<br>三、上传代码</p><p>注册并登陆GitHub账号后，新建仓库，名称必须为 user.github.io，如 hxf236386915.github.io。 打开文件_config.yml，翻到最底下，将下面代码复制进去。</p><p>deploy:<br>  type: git<br>  repository: <a href="https://github.com/hxf236386915/hxf236386915.github.io.git">https://github.com/hxf236386915/hxf236386915.github.io.git</a><br>  branch: master<br>其中将repository中hxf236386915改为自己的用户名，注意type、repository、branch后均有空格。通过如下命令在youblogfiles下生成静态文件并上传到服务器。</p><p>hexo g<br>hexo d<br>若执行hexo g出错则执行npm install hexo –save，若执行hexo d出错则执行npm install hexo-deployer-git –save。错误修正后再次执行hexo g和hexo d上传到服务器。</p><p>若未关联GitHub，执行hexo d时会提示输入GitHub账号用户名和密码，即:</p><p>username for ‘<a href="https://github.com&/#39;">https://github.com&#39;</a>:<br>password for ‘<a href="https://github.com&/#39;">https://github.com&#39;</a>:<br>hexo d执行成功后便可通过<a href="https://hxf236386915.github.io访问博客,看到的内容和http//localhost:4000%E7%9B%B8%E5%90%8C%E3%80%82">https://hxf236386915.github.io访问博客，看到的内容和http://localhost:4000相同。</a></p><p>四、添加ssh keys 到github</p><p>添加ssh key后不需要每次更新博客再输入用户名和密码。首先检查本地是否包含ssh keys。如果存在则直接将ssh key添加到GitHub之中，否则新生成ssh key。</p><p>输入一下代码，之后按照要求输入账号和两次密码</p><p>ssh-keygen -t rsa -C “your_email@exampl”<br>完成之后，打开博客文件夹，将your_email.pub中的内容复制到github中的设置-deploy keys中即可。</p><p>然后执行如下代码</p><p>hexo g<br>hexo d<br>五、绑定域名</p><p>首先，在博客文件夹中创建CNAME文件，不可以有后缀。然后将域名粘贴进文件中。并上传至github。</p><p>然后，在通过阿里云进行解析。详情如下</p><p>记录类型：CNAME<br>主机记录：@<br>解析线路：默认<br>记录值：<a href="http://hxf236386915.github.io/">http://hxf236386915.github.io</a><br>六、安装配置主题</p><p>这里使用的的是hexo中的theme主题。命令如下</p><p>cd youblogflie（你的博客文件夹）<br>git clone <a href="https://github.com/iissnan/hexo-theme-next">https://github.com/iissnan/hexo-theme-next</a> themes/next<br>将blog目录下_config.yml里的theme的名称landscape更改为next。</p><p>执行如下命令（每次部署文章的步骤）</p><p>hexo g  //生成缓存和静态文件<br>hexo d  //重新部署到服务器<br>当本地博客部署到服务器后，网页端无变化时可以采用下述命令。</p><p>hexo clean  //清楚缓存文件(db.json)和已生成的静态文件(public)<br>配置主题可在主题官网中查看相应教程，需要注意的是站点配置文件和主题配置文件。点击进入next官网</p><p>站点配置文件就是博客文件夹目录下的_config.yml。 主题配置文件为，博客文件夹-theme-next下的_config.yml</p><p>七、写作</p><p>首先创建一个md文件，命令如下：</p><p>hexo new 文件名<br>然后在博客文件夹目录下的source-_posts打开。</p><p>title：代表标题</p><p>date：日期</p><p>tags：[标签1，标签2]</p><p>categories：分类</p><p>—</p><p>正文</p><p>超链接：</p><p><a href="https://houxuefeng.com/">F</a><br>图片：</p><p><img src="http://pvacs1eu6.bkt.clouddn.com/WechatIMG57.jpeg" alt="1"><br>或者</p><img src="http://pvacs1eu6.bkt.clouddn.com/WechatIMG57.jpeg" width="100%" div align="center/">下面这个可以调整大小。<p>音乐：</p><audio id="audio" autoplay="autoplay">    <source src="http://qzone.haoduoge.com/music1/2015-04-23/1429774382.mp3" type="audio/mp3"></audio>八、关于图床的问题<p>本人选择的是七牛云，注册登录后，创建存储。然后就可以上传图片了。在上传完图片后选择复制外链即可。</p><p>同时推荐一款工具叫ipic。可自行搜索下载。</p><p>九、其他</p><p>另外在修改配置的时候，可以使用hexo s 边修改边预览。</p><p>修改创建文章时的默认值，可修改博客文件目录下 scaffolds-post.md 即可。</p><p>以上。</p><hr><p>hexo官网：<a href="https://hexo.io/zh-cn/docs/setup">https://hexo.io/zh-cn/docs/setup</a></p><p>必要组件：Node.js homebrew nvm(管理Node.js)<br>                  nvm参考：<a href="https://www.jianshu.com/p/a3f8778bc0a1">https://www.jianshu.com/p/a3f8778bc0a1</a></p><p>hexo主题 ：<br>1.<a href="https://hexo.fluid-dev.com/docs/">https://hexo.fluid-dev.com/docs/</a>  （fluid 好看）<br>2.<a href="http://theme-next.iissnan.com/getting-started.html">http://theme-next.iissnan.com/getting-started.html</a> （next 使用多）<br>3.<a href="https://www.haomwei.com/technology/maupassant-hexo.html#%E4%B8%BB%E9%A2%98%E7%89%B9%E6%80%A7%EF%BC%88%E8%87%B3%E7%AE%80%EF%BC%89">https://www.haomwei.com/technology/maupassant-hexo.html#主题特性（至简）</a></p><p>图片来源：<a href="https://wallhaven.cc/toplist?page=2">https://wallhaven.cc/toplist?page=2</a></p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记录</tag>
      
      <tag>博客</tag>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BLEACH</title>
    <link href="/chenduo-blog.github.io/2018/03/26/BLEACH/"/>
    <url>/chenduo-blog.github.io/2018/03/26/BLEACH/</url>
    
    <content type="html"><![CDATA[<h1 id="人物"><a href="#人物" class="headerlink" title="人物"></a>人物</h1><p>黒崎一護<br>（くろさき いちご）    なし（常時解放）    斬月<br>（ざんげつ）    天鎖斬月<br>（てんさざんげつ）<br>黒崎 一心<br>（くろさき いっしん）<br>　燃えろ　（もえろ）<br>　剡月　（えんげつ）</p><p>山本 元柳斎 重國<br>（やまもと げんりゅうさい しげくに）    万象一切灰燼と為せ<br>（ばんしょういっさいかいじんとなせ）    流刃若火<br>（りゅうじんじゃっか）    残火の太刀<br>（ざんかのたち）</p><p>雀部 長次郎 忠息<br>（ささきべ ちょうじろう ただおき）    穿て<br>（うがて）    厳霊丸<br>（ごんりょうまる）    黄煌厳霊離宮<br>（こうこうごんりょうりきゅう）</p><p>砕蜂<br>（ソイフォン）    尽敵螫殺<br>（じんてきしゃくせつ）    雀蜂<br>（すずめばち）    雀蜂雷公鞭<br>（じゃくほうらいこうべん）</p><p>大前田 希千代<br>（おおまえだ まれちよ）    打っ潰せ<br>（ぶっつぶせ）    五形頭<br>（げげつぶり）</p><p>市丸 ギン    射殺せ<br>（いころせ）    神鎗<br>（しんそう）    神殺鎗<br>（かみしにのやり）</p><p>吉良 イヅル<br>（きら イヅル）    面を上げろ<br>（おもてをあげろ）    侘助<br>（わびすけ）    </p><p>卯ノ花 烈<br>（うのはな れつ）    不明    肉雫唼<br>（みなづき）    皆尽<br>（みなづき）</p><p>朽木白哉<br>（くちき びゃくや）    散れ<br>（ちれ）    千本桜<br>（せんぼんざくら）    千本桜景厳<br>（せんぼんざくらかげよし）</p><p>藍染 惣右介<br>（あいぜん そうすけ）    砕けろ<br>（くだけろ）    鏡花水月<br>（きょうかすいげつ）</p><p>日番谷 冬獅郎<br>（ひつがや とうしろう）    霜天に坐せ<br>（そうてんにざせ）    氷輪丸<br>（ひょうりんまる）    大紅蓮氷輪丸<br>（だいぐれんひょうりんまる）</p><p>更木 剣八<br>（ざらき けんぱち）    呑め（のめ）    野晒<br>（のざらし）    </p><h1 id="黒崎一護（くろさきいちご）"><a href="#黒崎一護（くろさきいちご）" class="headerlink" title="黒崎一護（くろさきいちご）"></a>黒崎一護（くろさきいちご）</h1><p>キャラクター名：黒崎一護（くろさきいちご）<br>斬魄刀名：斬月（ざんげつ）<br>卍解名：天鎖斬月（てんさざんげつ）<br>一護自身の強大な霊力を凝縮し、卍解状態の攻撃力を保ったままで斬撃と高速移動を可能にします。必殺技の月牙天衝は、一護の霊力を刀に喰わせ、斬撃を巨大化させ飛ばす技です。<br>多くの斬魄刀が巨大化しますが、一護の斬魄刀は通常時よりコンパクトにまとまり、その漆黒の見た目が斬月の強さを引き立てています。</p><h1 id="朽木ルキア：袖白雪【白霞罸】"><a href="#朽木ルキア：袖白雪【白霞罸】" class="headerlink" title="朽木ルキア：袖白雪【白霞罸】"></a>朽木ルキア：袖白雪【白霞罸】</h1><p>キャラクター名：朽木ルキア（くちきるきあ）<br>斬魄刀名：袖白雪（そでのしらゆき）<br>卍解名：白霞罸（はっかのとがめ）</p><p>卍解を発動した瞬間、その周囲や敵が真っ白に凍りつき、凍ったらすぐに敵を含めて全て砕け散ってしまいます。<br>ルキア自身も服や髪が真っ白に変わり、とても美しい姿に変わります。</p>]]></content>
    
    
    <categories>
      
      <category>BLEACH</category>
      
    </categories>
    
    
    <tags>
      
      <tag>アニメ</tag>
      
      <tag>漫画</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
